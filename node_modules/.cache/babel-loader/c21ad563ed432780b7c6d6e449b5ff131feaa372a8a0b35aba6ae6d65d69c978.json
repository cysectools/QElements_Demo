{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { useQElement } from './QElementProvider';\nexport const QElementComponent = ({\n  elementId,\n  as: Component = 'div',\n  children,\n  className,\n  style: inlineStyle,\n  ...props\n}) => {\n  _s();\n  const {\n    getComputedStyle,\n    manager\n  } = useQElement();\n  const elementRef = useRef(null);\n\n  // Get the computed style from the QElement system\n  const computedStyle = getComputedStyle(elementId);\n\n  // Convert QElement style to CSS style object\n  const convertToCSSStyle = qStyle => {\n    const cssStyle = {};\n    Object.entries(qStyle).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        // Convert camelCase to kebab-case for CSS properties\n        const cssKey = key.replace(/([A-Z])/g, '-$1').toLowerCase();\n        cssStyle[cssKey] = value;\n      }\n    });\n    return cssStyle;\n  };\n\n  // Merge computed style with inline style\n  const finalStyle = {\n    ...(computedStyle ? convertToCSSStyle(computedStyle) : {}),\n    ...inlineStyle\n  };\n\n  // Update the element in the manager if it doesn't exist\n  useEffect(() => {\n    if (!manager.getElement(elementId)) {\n      manager.createElement(elementId);\n    }\n  }, [elementId, manager]);\n  return /*#__PURE__*/React.createElement(Component, {\n    ref: elementRef,\n    className,\n    style: finalStyle,\n    'data-qelement-id': elementId,\n    ...props\n  }, children);\n};\n\n// Hook for managing QElement styles\n_s(QElementComponent, \"SkQAt0wGleJML2x2fivqG3bOQSY=\", false, function () {\n  return [useQElement];\n});\n_c = QElementComponent;\nexport const useQElementStyle = elementId => {\n  _s2();\n  const {\n    updateParentStyle,\n    overrideChildStyle,\n    resetChildOverrides,\n    getComputedStyle\n  } = useQElement();\n  return {\n    // Update parent style (affects all children)\n    updateParent: newStyle => {\n      updateParentStyle(elementId, newStyle);\n    },\n    // Override child style (only affects this element)\n    override: overrides => {\n      overrideChildStyle(elementId, overrides);\n    },\n    // Reset overrides to parent values\n    reset: () => {\n      resetChildOverrides(elementId);\n    },\n    // Get computed style\n    getComputed: () => getComputedStyle(elementId)\n  };\n};\n_s2(useQElementStyle, \"dPiB/SzOyf0Q5EENc7u5MDlw/1c=\", false, function () {\n  return [useQElement];\n});\nvar _c;\n$RefreshReg$(_c, \"QElementComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useQElement","QElementComponent","elementId","as","Component","children","className","style","inlineStyle","props","_s","getComputedStyle","manager","elementRef","computedStyle","convertToCSSStyle","qStyle","cssStyle","Object","entries","forEach","key","value","undefined","cssKey","replace","toLowerCase","finalStyle","getElement","createElement","ref","_c","useQElementStyle","_s2","updateParentStyle","overrideChildStyle","resetChildOverrides","updateParent","newStyle","override","overrides","reset","getComputed","$RefreshReg$"],"sources":["/Users/jayson/Downloads/QElements_Demo/src/qelements/QElementComponent.tsx"],"sourcesContent":["import React, { useEffect, useRef, ReactNode } from 'react';\nimport { useQElement } from './QElementProvider';\nimport { QElementStyle, QElementProps } from './types';\n\ninterface QElementComponentProps extends QElementProps {\n  elementId: string;\n  as?: keyof JSX.IntrinsicElements;\n}\n\nexport const QElementComponent: React.FC<QElementComponentProps> = ({\n  elementId,\n  as: Component = 'div',\n  children,\n  className,\n  style: inlineStyle,\n  ...props\n}) => {\n  const { getComputedStyle, manager } = useQElement();\n  const elementRef = useRef<HTMLElement>(null);\n\n  // Get the computed style from the QElement system\n  const computedStyle = getComputedStyle(elementId);\n\n  // Convert QElement style to CSS style object\n  const convertToCSSStyle = (qStyle: QElementStyle): React.CSSProperties => {\n    const cssStyle: any = {};\n    \n    Object.entries(qStyle).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        // Convert camelCase to kebab-case for CSS properties\n        const cssKey = key.replace(/([A-Z])/g, '-$1').toLowerCase();\n        cssStyle[cssKey] = value;\n      }\n    });\n\n    return cssStyle as React.CSSProperties;\n  };\n\n  // Merge computed style with inline style\n  const finalStyle: any = {\n    ...(computedStyle ? convertToCSSStyle(computedStyle) : {}),\n    ...inlineStyle\n  };\n\n  // Update the element in the manager if it doesn't exist\n  useEffect(() => {\n    if (!manager.getElement(elementId)) {\n      manager.createElement(elementId);\n    }\n  }, [elementId, manager]);\n\n  return React.createElement(\n    Component,\n    {\n      ref: elementRef,\n      className,\n      style: finalStyle,\n      'data-qelement-id': elementId,\n      ...props\n    },\n    children\n  );\n};\n\n// Hook for managing QElement styles\nexport const useQElementStyle = (elementId: string) => {\n  const { updateParentStyle, overrideChildStyle, resetChildOverrides, getComputedStyle } = useQElement();\n\n  return {\n    // Update parent style (affects all children)\n    updateParent: (newStyle: Partial<QElementStyle>) => {\n      updateParentStyle(elementId, newStyle);\n    },\n    // Override child style (only affects this element)\n    override: (overrides: Partial<QElementStyle>) => {\n      overrideChildStyle(elementId, overrides);\n    },\n    // Reset overrides to parent values\n    reset: () => {\n      resetChildOverrides(elementId);\n    },\n    // Get computed style\n    getComputed: () => getComputedStyle(elementId)\n  };\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAmB,OAAO;AAC3D,SAASC,WAAW,QAAQ,oBAAoB;AAQhD,OAAO,MAAMC,iBAAmD,GAAGA,CAAC;EAClEC,SAAS;EACTC,EAAE,EAAEC,SAAS,GAAG,KAAK;EACrBC,QAAQ;EACRC,SAAS;EACTC,KAAK,EAAEC,WAAW;EAClB,GAAGC;AACL,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM;IAAEC,gBAAgB;IAAEC;EAAQ,CAAC,GAAGZ,WAAW,CAAC,CAAC;EACnD,MAAMa,UAAU,GAAGd,MAAM,CAAc,IAAI,CAAC;;EAE5C;EACA,MAAMe,aAAa,GAAGH,gBAAgB,CAACT,SAAS,CAAC;;EAEjD;EACA,MAAMa,iBAAiB,GAAIC,MAAqB,IAA0B;IACxE,MAAMC,QAAa,GAAG,CAAC,CAAC;IAExBC,MAAM,CAACC,OAAO,CAACH,MAAM,CAAC,CAACI,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;MAC/C,IAAIA,KAAK,KAAKC,SAAS,IAAID,KAAK,KAAK,IAAI,EAAE;QACzC;QACA,MAAME,MAAM,GAAGH,GAAG,CAACI,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAACC,WAAW,CAAC,CAAC;QAC3DT,QAAQ,CAACO,MAAM,CAAC,GAAGF,KAAK;MAC1B;IACF,CAAC,CAAC;IAEF,OAAOL,QAAQ;EACjB,CAAC;;EAED;EACA,MAAMU,UAAe,GAAG;IACtB,IAAIb,aAAa,GAAGC,iBAAiB,CAACD,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;IAC1D,GAAGN;EACL,CAAC;;EAED;EACAV,SAAS,CAAC,MAAM;IACd,IAAI,CAACc,OAAO,CAACgB,UAAU,CAAC1B,SAAS,CAAC,EAAE;MAClCU,OAAO,CAACiB,aAAa,CAAC3B,SAAS,CAAC;IAClC;EACF,CAAC,EAAE,CAACA,SAAS,EAAEU,OAAO,CAAC,CAAC;EAExB,oBAAOf,KAAK,CAACgC,aAAa,CACxBzB,SAAS,EACT;IACE0B,GAAG,EAAEjB,UAAU;IACfP,SAAS;IACTC,KAAK,EAAEoB,UAAU;IACjB,kBAAkB,EAAEzB,SAAS;IAC7B,GAAGO;EACL,CAAC,EACDJ,QACF,CAAC;AACH,CAAC;;AAED;AAAAK,EAAA,CAvDaT,iBAAmD;EAAA,QAQxBD,WAAW;AAAA;AAAA+B,EAAA,GARtC9B,iBAAmD;AAwDhE,OAAO,MAAM+B,gBAAgB,GAAI9B,SAAiB,IAAK;EAAA+B,GAAA;EACrD,MAAM;IAAEC,iBAAiB;IAAEC,kBAAkB;IAAEC,mBAAmB;IAAEzB;EAAiB,CAAC,GAAGX,WAAW,CAAC,CAAC;EAEtG,OAAO;IACL;IACAqC,YAAY,EAAGC,QAAgC,IAAK;MAClDJ,iBAAiB,CAAChC,SAAS,EAAEoC,QAAQ,CAAC;IACxC,CAAC;IACD;IACAC,QAAQ,EAAGC,SAAiC,IAAK;MAC/CL,kBAAkB,CAACjC,SAAS,EAAEsC,SAAS,CAAC;IAC1C,CAAC;IACD;IACAC,KAAK,EAAEA,CAAA,KAAM;MACXL,mBAAmB,CAAClC,SAAS,CAAC;IAChC,CAAC;IACD;IACAwC,WAAW,EAAEA,CAAA,KAAM/B,gBAAgB,CAACT,SAAS;EAC/C,CAAC;AACH,CAAC;AAAC+B,GAAA,CAnBWD,gBAAgB;EAAA,QAC8DhC,WAAW;AAAA;AAAA,IAAA+B,EAAA;AAAAY,YAAA,CAAAZ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}