{"ast":null,"code":"import _objectSpread from \"/Users/jayson/Downloads/QElements_Demo/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/jayson/Downloads/QElements_Demo/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"elementId\", \"as\", \"children\", \"className\", \"style\"];\nimport React, { useEffect, useRef } from 'react';\nimport { useQElement } from './QElementProvider';\nexport const QElementComponent = _ref => {\n  let {\n      elementId,\n      as: Component = 'div',\n      children,\n      className,\n      style: inlineStyle\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  const {\n    getComputedStyle,\n    manager\n  } = useQElement();\n  const elementRef = useRef(null);\n  // Get the computed style from the QElement system\n  const computedStyle = getComputedStyle(elementId);\n  // Convert QElement style to CSS style object\n  const convertToCSSStyle = qStyle => {\n    const cssStyle = {};\n    Object.entries(qStyle).forEach(_ref2 => {\n      let [key, value] = _ref2;\n      if (value !== undefined && value !== null) {\n        // Convert camelCase to kebab-case for CSS properties\n        const cssKey = key.replace(/([A-Z])/g, '-$1').toLowerCase();\n        cssStyle[cssKey] = value;\n      }\n    });\n    return cssStyle;\n  };\n  // Merge computed style with inline style\n  const finalStyle = _objectSpread(_objectSpread({}, computedStyle ? convertToCSSStyle(computedStyle) : {}), inlineStyle);\n  // Update the element in the manager if it doesn't exist\n  useEffect(() => {\n    if (!manager.getElement(elementId)) {\n      manager.createElement(elementId);\n    }\n  }, [elementId, manager]);\n  return React.createElement(Component, _objectSpread({\n    ref: elementRef,\n    className,\n    style: finalStyle,\n    'data-qelement-id': elementId\n  }, props), children);\n};\n// Hook for managing QElement styles\nexport const useQElementStyle = elementId => {\n  const {\n    updateParentStyle,\n    overrideChildStyle,\n    resetChildOverrides,\n    getComputedStyle\n  } = useQElement();\n  return {\n    // Update parent style (affects all children)\n    updateParent: newStyle => {\n      updateParentStyle(elementId, newStyle);\n    },\n    // Override child style (only affects this element)\n    override: overrides => {\n      overrideChildStyle(elementId, overrides);\n    },\n    // Reset overrides to parent values\n    reset: () => {\n      resetChildOverrides(elementId);\n    },\n    // Get computed style\n    getComputed: () => getComputedStyle(elementId)\n  };\n};","map":{"version":3,"names":["React","useEffect","useRef","useQElement","QElementComponent","_ref","elementId","as","Component","children","className","style","inlineStyle","props","_objectWithoutProperties","_excluded","getComputedStyle","manager","elementRef","computedStyle","convertToCSSStyle","qStyle","cssStyle","Object","entries","forEach","_ref2","key","value","undefined","cssKey","replace","toLowerCase","finalStyle","_objectSpread","getElement","createElement","ref","useQElementStyle","updateParentStyle","overrideChildStyle","resetChildOverrides","updateParent","newStyle","override","overrides","reset","getComputed"],"sources":["/Users/jayson/Downloads/QElement/dist/QElementComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useQElement } from './QElementProvider';\nexport const QElementComponent = ({ elementId, as: Component = 'div', children, className, style: inlineStyle, ...props }) => {\n    const { getComputedStyle, manager } = useQElement();\n    const elementRef = useRef(null);\n    // Get the computed style from the QElement system\n    const computedStyle = getComputedStyle(elementId);\n    // Convert QElement style to CSS style object\n    const convertToCSSStyle = (qStyle) => {\n        const cssStyle = {};\n        Object.entries(qStyle).forEach(([key, value]) => {\n            if (value !== undefined && value !== null) {\n                // Convert camelCase to kebab-case for CSS properties\n                const cssKey = key.replace(/([A-Z])/g, '-$1').toLowerCase();\n                cssStyle[cssKey] = value;\n            }\n        });\n        return cssStyle;\n    };\n    // Merge computed style with inline style\n    const finalStyle = {\n        ...(computedStyle ? convertToCSSStyle(computedStyle) : {}),\n        ...inlineStyle\n    };\n    // Update the element in the manager if it doesn't exist\n    useEffect(() => {\n        if (!manager.getElement(elementId)) {\n            manager.createElement(elementId);\n        }\n    }, [elementId, manager]);\n    return React.createElement(Component, {\n        ref: elementRef,\n        className,\n        style: finalStyle,\n        'data-qelement-id': elementId,\n        ...props\n    }, children);\n};\n// Hook for managing QElement styles\nexport const useQElementStyle = (elementId) => {\n    const { updateParentStyle, overrideChildStyle, resetChildOverrides, getComputedStyle } = useQElement();\n    return {\n        // Update parent style (affects all children)\n        updateParent: (newStyle) => {\n            updateParentStyle(elementId, newStyle);\n        },\n        // Override child style (only affects this element)\n        override: (overrides) => {\n            overrideChildStyle(elementId, overrides);\n        },\n        // Reset overrides to parent values\n        reset: () => {\n            resetChildOverrides(elementId);\n        },\n        // Get computed style\n        getComputed: () => getComputedStyle(elementId)\n    };\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,WAAW,QAAQ,oBAAoB;AAChD,OAAO,MAAMC,iBAAiB,GAAGC,IAAA,IAA6F;EAAA,IAA5F;MAAEC,SAAS;MAAEC,EAAE,EAAEC,SAAS,GAAG,KAAK;MAAEC,QAAQ;MAAEC,SAAS;MAAEC,KAAK,EAAEC;IAAsB,CAAC,GAAAP,IAAA;IAAPQ,KAAK,GAAAC,wBAAA,CAAAT,IAAA,EAAAU,SAAA;EACnH,MAAM;IAAEC,gBAAgB;IAAEC;EAAQ,CAAC,GAAGd,WAAW,CAAC,CAAC;EACnD,MAAMe,UAAU,GAAGhB,MAAM,CAAC,IAAI,CAAC;EAC/B;EACA,MAAMiB,aAAa,GAAGH,gBAAgB,CAACV,SAAS,CAAC;EACjD;EACA,MAAMc,iBAAiB,GAAIC,MAAM,IAAK;IAClC,MAAMC,QAAQ,GAAG,CAAC,CAAC;IACnBC,MAAM,CAACC,OAAO,CAACH,MAAM,CAAC,CAACI,OAAO,CAACC,KAAA,IAAkB;MAAA,IAAjB,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAAF,KAAA;MACxC,IAAIE,KAAK,KAAKC,SAAS,IAAID,KAAK,KAAK,IAAI,EAAE;QACvC;QACA,MAAME,MAAM,GAAGH,GAAG,CAACI,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAACC,WAAW,CAAC,CAAC;QAC3DV,QAAQ,CAACQ,MAAM,CAAC,GAAGF,KAAK;MAC5B;IACJ,CAAC,CAAC;IACF,OAAON,QAAQ;EACnB,CAAC;EACD;EACA,MAAMW,UAAU,GAAAC,aAAA,CAAAA,aAAA,KACRf,aAAa,GAAGC,iBAAiB,CAACD,aAAa,CAAC,GAAG,CAAC,CAAC,GACtDP,WAAW,CACjB;EACD;EACAX,SAAS,CAAC,MAAM;IACZ,IAAI,CAACgB,OAAO,CAACkB,UAAU,CAAC7B,SAAS,CAAC,EAAE;MAChCW,OAAO,CAACmB,aAAa,CAAC9B,SAAS,CAAC;IACpC;EACJ,CAAC,EAAE,CAACA,SAAS,EAAEW,OAAO,CAAC,CAAC;EACxB,OAAOjB,KAAK,CAACoC,aAAa,CAAC5B,SAAS,EAAA0B,aAAA;IAChCG,GAAG,EAAEnB,UAAU;IACfR,SAAS;IACTC,KAAK,EAAEsB,UAAU;IACjB,kBAAkB,EAAE3B;EAAS,GAC1BO,KAAK,GACTJ,QAAQ,CAAC;AAChB,CAAC;AACD;AACA,OAAO,MAAM6B,gBAAgB,GAAIhC,SAAS,IAAK;EAC3C,MAAM;IAAEiC,iBAAiB;IAAEC,kBAAkB;IAAEC,mBAAmB;IAAEzB;EAAiB,CAAC,GAAGb,WAAW,CAAC,CAAC;EACtG,OAAO;IACH;IACAuC,YAAY,EAAGC,QAAQ,IAAK;MACxBJ,iBAAiB,CAACjC,SAAS,EAAEqC,QAAQ,CAAC;IAC1C,CAAC;IACD;IACAC,QAAQ,EAAGC,SAAS,IAAK;MACrBL,kBAAkB,CAAClC,SAAS,EAAEuC,SAAS,CAAC;IAC5C,CAAC;IACD;IACAC,KAAK,EAAEA,CAAA,KAAM;MACTL,mBAAmB,CAACnC,SAAS,CAAC;IAClC,CAAC;IACD;IACAyC,WAAW,EAAEA,CAAA,KAAM/B,gBAAgB,CAACV,SAAS;EACjD,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}