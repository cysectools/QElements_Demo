{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useState, useCallback } from 'react';\nimport { QElementManager } from './QElementManager';\nconst QElementContext = createContext(null);\nexport const QElementProvider = ({\n  children\n}) => {\n  const [manager] = useState(() => new QElementManager());\n  const [, forceUpdate] = useState({});\n  const triggerUpdate = useCallback(() => {\n    forceUpdate({});\n  }, []);\n  const createElement = useCallback((id, style = {}) => {\n    const element = manager.createElement(id, style);\n    triggerUpdate();\n    return element;\n  }, [manager, triggerUpdate]);\n  const updateParentStyle = useCallback((id, newStyle) => {\n    manager.updateParentStyle(id, newStyle);\n    triggerUpdate();\n  }, [manager, triggerUpdate]);\n  const overrideChildStyle = useCallback((id, overrides) => {\n    manager.overrideChildStyle(id, overrides);\n    triggerUpdate();\n  }, [manager, triggerUpdate]);\n  const resetChildOverrides = useCallback(id => {\n    manager.resetChildOverrides(id);\n    triggerUpdate();\n  }, [manager, triggerUpdate]);\n  const getComputedStyle = useCallback(id => {\n    return manager.getComputedStyle(id);\n  }, [manager]);\n  const contextValue = {\n    manager,\n    createElement,\n    updateParentStyle,\n    overrideChildStyle,\n    resetChildOverrides,\n    getComputedStyle,\n    forceUpdate: triggerUpdate\n  };\n  return _jsx(QElementContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n};\nexport const useQElement = () => {\n  const context = useContext(QElementContext);\n  if (!context) {\n    throw new Error('useQElement must be used within a QElementProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["jsx","_jsx","createContext","useContext","useState","useCallback","QElementManager","QElementContext","QElementProvider","children","manager","forceUpdate","triggerUpdate","createElement","id","style","element","updateParentStyle","newStyle","overrideChildStyle","overrides","resetChildOverrides","getComputedStyle","contextValue","Provider","value","useQElement","context","Error"],"sources":["/Users/jayson/Downloads/QElement/dist/QElementProvider.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useState, useCallback } from 'react';\nimport { QElementManager } from './QElementManager';\nconst QElementContext = createContext(null);\nexport const QElementProvider = ({ children }) => {\n    const [manager] = useState(() => new QElementManager());\n    const [, forceUpdate] = useState({});\n    const triggerUpdate = useCallback(() => {\n        forceUpdate({});\n    }, []);\n    const createElement = useCallback((id, style = {}) => {\n        const element = manager.createElement(id, style);\n        triggerUpdate();\n        return element;\n    }, [manager, triggerUpdate]);\n    const updateParentStyle = useCallback((id, newStyle) => {\n        manager.updateParentStyle(id, newStyle);\n        triggerUpdate();\n    }, [manager, triggerUpdate]);\n    const overrideChildStyle = useCallback((id, overrides) => {\n        manager.overrideChildStyle(id, overrides);\n        triggerUpdate();\n    }, [manager, triggerUpdate]);\n    const resetChildOverrides = useCallback((id) => {\n        manager.resetChildOverrides(id);\n        triggerUpdate();\n    }, [manager, triggerUpdate]);\n    const getComputedStyle = useCallback((id) => {\n        return manager.getComputedStyle(id);\n    }, [manager]);\n    const contextValue = {\n        manager,\n        createElement,\n        updateParentStyle,\n        overrideChildStyle,\n        resetChildOverrides,\n        getComputedStyle,\n        forceUpdate: triggerUpdate\n    };\n    return (_jsx(QElementContext.Provider, { value: contextValue, children: children }));\n};\nexport const useQElement = () => {\n    const context = useContext(QElementContext);\n    if (!context) {\n        throw new Error('useQElement must be used within a QElementProvider');\n    }\n    return context;\n};\n"],"mappings":"AAAA,SAASA,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACxE,SAASC,eAAe,QAAQ,mBAAmB;AACnD,MAAMC,eAAe,GAAGL,aAAa,CAAC,IAAI,CAAC;AAC3C,OAAO,MAAMM,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAC9C,MAAM,CAACC,OAAO,CAAC,GAAGN,QAAQ,CAAC,MAAM,IAAIE,eAAe,CAAC,CAAC,CAAC;EACvD,MAAM,GAAGK,WAAW,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC,MAAMQ,aAAa,GAAGP,WAAW,CAAC,MAAM;IACpCM,WAAW,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EACN,MAAME,aAAa,GAAGR,WAAW,CAAC,CAACS,EAAE,EAAEC,KAAK,GAAG,CAAC,CAAC,KAAK;IAClD,MAAMC,OAAO,GAAGN,OAAO,CAACG,aAAa,CAACC,EAAE,EAAEC,KAAK,CAAC;IAChDH,aAAa,CAAC,CAAC;IACf,OAAOI,OAAO;EAClB,CAAC,EAAE,CAACN,OAAO,EAAEE,aAAa,CAAC,CAAC;EAC5B,MAAMK,iBAAiB,GAAGZ,WAAW,CAAC,CAACS,EAAE,EAAEI,QAAQ,KAAK;IACpDR,OAAO,CAACO,iBAAiB,CAACH,EAAE,EAAEI,QAAQ,CAAC;IACvCN,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAACF,OAAO,EAAEE,aAAa,CAAC,CAAC;EAC5B,MAAMO,kBAAkB,GAAGd,WAAW,CAAC,CAACS,EAAE,EAAEM,SAAS,KAAK;IACtDV,OAAO,CAACS,kBAAkB,CAACL,EAAE,EAAEM,SAAS,CAAC;IACzCR,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAACF,OAAO,EAAEE,aAAa,CAAC,CAAC;EAC5B,MAAMS,mBAAmB,GAAGhB,WAAW,CAAES,EAAE,IAAK;IAC5CJ,OAAO,CAACW,mBAAmB,CAACP,EAAE,CAAC;IAC/BF,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAACF,OAAO,EAAEE,aAAa,CAAC,CAAC;EAC5B,MAAMU,gBAAgB,GAAGjB,WAAW,CAAES,EAAE,IAAK;IACzC,OAAOJ,OAAO,CAACY,gBAAgB,CAACR,EAAE,CAAC;EACvC,CAAC,EAAE,CAACJ,OAAO,CAAC,CAAC;EACb,MAAMa,YAAY,GAAG;IACjBb,OAAO;IACPG,aAAa;IACbI,iBAAiB;IACjBE,kBAAkB;IAClBE,mBAAmB;IACnBC,gBAAgB;IAChBX,WAAW,EAAEC;EACjB,CAAC;EACD,OAAQX,IAAI,CAACM,eAAe,CAACiB,QAAQ,EAAE;IAAEC,KAAK,EAAEF,YAAY;IAAEd,QAAQ,EAAEA;EAAS,CAAC,CAAC;AACvF,CAAC;AACD,OAAO,MAAMiB,WAAW,GAAGA,CAAA,KAAM;EAC7B,MAAMC,OAAO,GAAGxB,UAAU,CAACI,eAAe,CAAC;EAC3C,IAAI,CAACoB,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACzE;EACA,OAAOD,OAAO;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}