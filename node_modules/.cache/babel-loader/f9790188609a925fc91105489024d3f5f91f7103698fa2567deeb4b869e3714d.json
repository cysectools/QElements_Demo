{"ast":null,"code":"import _objectSpread from \"/Users/jayson/Downloads/QElements_Demo/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { QElementValidator } from './QElementValidator';\nimport { QElementThemeManager } from './QElementTheme';\nimport { QElementResponsiveManager } from './QElementResponsive';\nexport class QElement {\n  constructor(id) {\n    let style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let metadata = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let validator = arguments.length > 3 ? arguments[3] : undefined;\n    let themeManager = arguments.length > 4 ? arguments[4] : undefined;\n    let responsiveManager = arguments.length > 5 ? arguments[5] : undefined;\n    this._parent = null;\n    this._children = [];\n    this._overrides = {};\n    this._metadata = {};\n    this._animations = new Map();\n    this._isVisible = true;\n    this._isEnabled = true;\n    // Event system for style changes\n    this._styleChangeListeners = [];\n    this._id = id;\n    this._style = _objectSpread({}, style);\n    this._metadata = _objectSpread({}, metadata);\n    this._validator = validator || new QElementValidator();\n    this._themeManager = themeManager || new QElementThemeManager();\n    this._responsiveManager = responsiveManager || new QElementResponsiveManager();\n  }\n  get id() {\n    return this._id;\n  }\n  get style() {\n    return this._style;\n  }\n  get parent() {\n    return this._parent;\n  }\n  get children() {\n    return [...this._children];\n  }\n  get overrides() {\n    return _objectSpread({}, this._overrides);\n  }\n  // Get the computed style (parent styles + overrides + theme + responsive)\n  get computedStyle() {\n    var _this$_parent;\n    const parentStyle = ((_this$_parent = this._parent) === null || _this$_parent === void 0 ? void 0 : _this$_parent.computedStyle) || {};\n    const baseStyle = _objectSpread(_objectSpread({}, parentStyle), this._overrides);\n    // Apply theme variables\n    const themedStyle = this._themeManager.applyThemeVariables(baseStyle);\n    // Apply responsive styles\n    const responsiveStyle = this._responsiveManager.getResponsiveStyles(themedStyle);\n    return responsiveStyle;\n  }\n  // Set parent element\n  setParent(parent) {\n    if (this._parent) {\n      this._parent.removeChild(this);\n    }\n    this._parent = parent;\n    parent._children.push(this);\n  }\n  // Add child element\n  addChild(child) {\n    child.setParent(this);\n  }\n  // Remove child element\n  removeChild(child) {\n    const index = this._children.indexOf(child);\n    if (index > -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n    }\n  }\n  // Reset overrides to parent values\n  resetOverrides() {\n    this._overrides = {};\n  }\n  // Get a specific style property (with inheritance)\n  getStyleProperty(property) {\n    const computed = this.computedStyle;\n    return computed[property];\n  }\n  // Set a specific style property (as override)\n  setStyleProperty(property, value) {\n    this.overrideStyle({\n      [property]: value\n    });\n  }\n  // Convert to configuration object\n  toConfig() {\n    return {\n      id: this._id,\n      style: this._style,\n      children: this._children.map(child => child.toConfig())\n    };\n  }\n  // Create from configuration\n  static fromConfig(config) {\n    const element = new QElement(config.id, config.style);\n    if (config.children) {\n      config.children.forEach(childConfig => {\n        const child = QElement.fromConfig(childConfig);\n        element.addChild(child);\n      });\n    }\n    return element;\n  }\n  // Find element by ID\n  findById(id) {\n    if (this._id === id) {\n      return this;\n    }\n    for (const child of this._children) {\n      const found = child.findById(id);\n      if (found) return found;\n    }\n    return null;\n  }\n  // Get all descendants\n  getAllDescendants() {\n    const descendants = [];\n    for (const child of this._children) {\n      descendants.push(child);\n      descendants.push(...child.getAllDescendants());\n    }\n    return descendants;\n  }\n  // Clone the element\n  clone() {\n    return QElement.fromConfig(this.toConfig());\n  }\n  // Enhanced methods for advanced features\n  // Metadata management\n  get metadata() {\n    return _objectSpread({}, this._metadata);\n  }\n  updateMetadata(metadata) {\n    this._metadata = _objectSpread(_objectSpread(_objectSpread({}, this._metadata), metadata), {}, {\n      updatedAt: new Date()\n    });\n  }\n  // Visibility and state management\n  get isVisible() {\n    return this._isVisible;\n  }\n  get isEnabled() {\n    return this._isEnabled;\n  }\n  setVisible(visible) {\n    this._isVisible = visible;\n  }\n  setEnabled(enabled) {\n    this._isEnabled = enabled;\n  }\n  // Animation management\n  addAnimation(name, animation) {\n    this._animations.set(name, animation);\n  }\n  removeAnimation(name) {\n    this._animations.delete(name);\n  }\n  getAnimation(name) {\n    return this._animations.get(name);\n  }\n  getAllAnimations() {\n    return Array.from(this._animations.values());\n  }\n  // Style validation\n  validateStyle() {\n    return this._validator.validate(this._style);\n  }\n  validateOverrides() {\n    return this._validator.validate(this._overrides);\n  }\n  // Theme management\n  applyTheme(themeName) {\n    this._themeManager.setCurrentTheme(themeName);\n  }\n  getCurrentTheme() {\n    return this._themeManager.getCurrentTheme().name;\n  }\n  // Responsive management\n  getCurrentBreakpoint() {\n    return this._responsiveManager.getCurrentBreakpoint();\n  }\n  createResponsiveStyles(responsiveStyles) {\n    const responsiveStyle = this._responsiveManager.createResponsiveStyles(this._style, responsiveStyles);\n    this.updateStyle(responsiveStyle);\n  }\n  // Advanced style operations\n  mergeStyle(newStyle) {\n    let deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (deep) {\n      this._style = this._deepMerge(this._style, newStyle);\n    } else {\n      this._style = _objectSpread(_objectSpread({}, this._style), newStyle);\n    }\n  }\n  _deepMerge(target, source) {\n    const result = _objectSpread({}, target);\n    for (const key in source) {\n      if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\n        result[key] = this._deepMerge(target[key] || {}, source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    }\n    return result;\n  }\n  // Style inheritance control\n  inheritFromParent(properties) {\n    if (this._parent) {\n      const parentStyle = this._parent.computedStyle;\n      const inheritedStyle = {};\n      properties.forEach(prop => {\n        if (parentStyle[prop] !== undefined) {\n          inheritedStyle[prop] = parentStyle[prop];\n        }\n      });\n      this.overrideStyle(inheritedStyle);\n    }\n  }\n  // Style reset methods\n  resetToParent() {\n    this._overrides = {};\n  }\n  resetToDefault() {\n    this._style = {};\n    this._overrides = {};\n  }\n  // Performance and optimization\n  getStyleHash() {\n    const styleString = JSON.stringify(this.computedStyle);\n    return this._hashString(styleString);\n  }\n  _hashString(str) {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return hash.toString(36);\n  }\n  onStyleChange(listener) {\n    this._styleChangeListeners.push(listener);\n    return () => {\n      const index = this._styleChangeListeners.indexOf(listener);\n      if (index > -1) {\n        this._styleChangeListeners.splice(index, 1);\n      }\n    };\n  }\n  _notifyStyleChange() {\n    this._styleChangeListeners.forEach(listener => listener(this));\n  }\n  // Enhanced update methods that notify listeners\n  updateStyle(newStyle) {\n    this._style = _objectSpread(_objectSpread({}, this._style), newStyle);\n    this._notifyStyleChange();\n  }\n  overrideStyle(overrides) {\n    this._overrides = _objectSpread(_objectSpread({}, this._overrides), overrides);\n    this._notifyStyleChange();\n  }\n}","map":{"version":3,"names":["QElementValidator","QElementThemeManager","QElementResponsiveManager","QElement","constructor","id","style","arguments","length","undefined","metadata","validator","themeManager","responsiveManager","_parent","_children","_overrides","_metadata","_animations","Map","_isVisible","_isEnabled","_styleChangeListeners","_id","_style","_objectSpread","_validator","_themeManager","_responsiveManager","parent","children","overrides","computedStyle","_this$_parent","parentStyle","baseStyle","themedStyle","applyThemeVariables","responsiveStyle","getResponsiveStyles","setParent","removeChild","push","addChild","child","index","indexOf","splice","resetOverrides","getStyleProperty","property","computed","setStyleProperty","value","overrideStyle","toConfig","map","fromConfig","config","element","forEach","childConfig","findById","found","getAllDescendants","descendants","clone","updateMetadata","updatedAt","Date","isVisible","isEnabled","setVisible","visible","setEnabled","enabled","addAnimation","name","animation","set","removeAnimation","delete","getAnimation","get","getAllAnimations","Array","from","values","validateStyle","validate","validateOverrides","applyTheme","themeName","setCurrentTheme","getCurrentTheme","getCurrentBreakpoint","createResponsiveStyles","responsiveStyles","updateStyle","mergeStyle","newStyle","deep","_deepMerge","target","source","result","key","isArray","inheritFromParent","properties","inheritedStyle","prop","resetToParent","resetToDefault","getStyleHash","styleString","JSON","stringify","_hashString","str","hash","i","char","charCodeAt","toString","onStyleChange","listener","_notifyStyleChange"],"sources":["/Users/jayson/Downloads/QElement/dist/QElement.js"],"sourcesContent":["import { QElementValidator } from './QElementValidator';\nimport { QElementThemeManager } from './QElementTheme';\nimport { QElementResponsiveManager } from './QElementResponsive';\nexport class QElement {\n    constructor(id, style = {}, metadata = {}, validator, themeManager, responsiveManager) {\n        this._parent = null;\n        this._children = [];\n        this._overrides = {};\n        this._metadata = {};\n        this._animations = new Map();\n        this._isVisible = true;\n        this._isEnabled = true;\n        // Event system for style changes\n        this._styleChangeListeners = [];\n        this._id = id;\n        this._style = { ...style };\n        this._metadata = { ...metadata };\n        this._validator = validator || new QElementValidator();\n        this._themeManager = themeManager || new QElementThemeManager();\n        this._responsiveManager = responsiveManager || new QElementResponsiveManager();\n    }\n    get id() {\n        return this._id;\n    }\n    get style() {\n        return this._style;\n    }\n    get parent() {\n        return this._parent;\n    }\n    get children() {\n        return [...this._children];\n    }\n    get overrides() {\n        return { ...this._overrides };\n    }\n    // Get the computed style (parent styles + overrides + theme + responsive)\n    get computedStyle() {\n        const parentStyle = this._parent?.computedStyle || {};\n        const baseStyle = { ...parentStyle, ...this._overrides };\n        // Apply theme variables\n        const themedStyle = this._themeManager.applyThemeVariables(baseStyle);\n        // Apply responsive styles\n        const responsiveStyle = this._responsiveManager.getResponsiveStyles(themedStyle);\n        return responsiveStyle;\n    }\n    // Set parent element\n    setParent(parent) {\n        if (this._parent) {\n            this._parent.removeChild(this);\n        }\n        this._parent = parent;\n        parent._children.push(this);\n    }\n    // Add child element\n    addChild(child) {\n        child.setParent(this);\n    }\n    // Remove child element\n    removeChild(child) {\n        const index = this._children.indexOf(child);\n        if (index > -1) {\n            this._children.splice(index, 1);\n            child._parent = null;\n        }\n    }\n    // Reset overrides to parent values\n    resetOverrides() {\n        this._overrides = {};\n    }\n    // Get a specific style property (with inheritance)\n    getStyleProperty(property) {\n        const computed = this.computedStyle;\n        return computed[property];\n    }\n    // Set a specific style property (as override)\n    setStyleProperty(property, value) {\n        this.overrideStyle({ [property]: value });\n    }\n    // Convert to configuration object\n    toConfig() {\n        return {\n            id: this._id,\n            style: this._style,\n            children: this._children.map(child => child.toConfig())\n        };\n    }\n    // Create from configuration\n    static fromConfig(config) {\n        const element = new QElement(config.id, config.style);\n        if (config.children) {\n            config.children.forEach(childConfig => {\n                const child = QElement.fromConfig(childConfig);\n                element.addChild(child);\n            });\n        }\n        return element;\n    }\n    // Find element by ID\n    findById(id) {\n        if (this._id === id) {\n            return this;\n        }\n        for (const child of this._children) {\n            const found = child.findById(id);\n            if (found)\n                return found;\n        }\n        return null;\n    }\n    // Get all descendants\n    getAllDescendants() {\n        const descendants = [];\n        for (const child of this._children) {\n            descendants.push(child);\n            descendants.push(...child.getAllDescendants());\n        }\n        return descendants;\n    }\n    // Clone the element\n    clone() {\n        return QElement.fromConfig(this.toConfig());\n    }\n    // Enhanced methods for advanced features\n    // Metadata management\n    get metadata() {\n        return { ...this._metadata };\n    }\n    updateMetadata(metadata) {\n        this._metadata = { ...this._metadata, ...metadata, updatedAt: new Date() };\n    }\n    // Visibility and state management\n    get isVisible() {\n        return this._isVisible;\n    }\n    get isEnabled() {\n        return this._isEnabled;\n    }\n    setVisible(visible) {\n        this._isVisible = visible;\n    }\n    setEnabled(enabled) {\n        this._isEnabled = enabled;\n    }\n    // Animation management\n    addAnimation(name, animation) {\n        this._animations.set(name, animation);\n    }\n    removeAnimation(name) {\n        this._animations.delete(name);\n    }\n    getAnimation(name) {\n        return this._animations.get(name);\n    }\n    getAllAnimations() {\n        return Array.from(this._animations.values());\n    }\n    // Style validation\n    validateStyle() {\n        return this._validator.validate(this._style);\n    }\n    validateOverrides() {\n        return this._validator.validate(this._overrides);\n    }\n    // Theme management\n    applyTheme(themeName) {\n        this._themeManager.setCurrentTheme(themeName);\n    }\n    getCurrentTheme() {\n        return this._themeManager.getCurrentTheme().name;\n    }\n    // Responsive management\n    getCurrentBreakpoint() {\n        return this._responsiveManager.getCurrentBreakpoint();\n    }\n    createResponsiveStyles(responsiveStyles) {\n        const responsiveStyle = this._responsiveManager.createResponsiveStyles(this._style, responsiveStyles);\n        this.updateStyle(responsiveStyle);\n    }\n    // Advanced style operations\n    mergeStyle(newStyle, deep = false) {\n        if (deep) {\n            this._style = this._deepMerge(this._style, newStyle);\n        }\n        else {\n            this._style = { ...this._style, ...newStyle };\n        }\n    }\n    _deepMerge(target, source) {\n        const result = { ...target };\n        for (const key in source) {\n            if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\n                result[key] = this._deepMerge(target[key] || {}, source[key]);\n            }\n            else {\n                result[key] = source[key];\n            }\n        }\n        return result;\n    }\n    // Style inheritance control\n    inheritFromParent(properties) {\n        if (this._parent) {\n            const parentStyle = this._parent.computedStyle;\n            const inheritedStyle = {};\n            properties.forEach(prop => {\n                if (parentStyle[prop] !== undefined) {\n                    inheritedStyle[prop] = parentStyle[prop];\n                }\n            });\n            this.overrideStyle(inheritedStyle);\n        }\n    }\n    // Style reset methods\n    resetToParent() {\n        this._overrides = {};\n    }\n    resetToDefault() {\n        this._style = {};\n        this._overrides = {};\n    }\n    // Performance and optimization\n    getStyleHash() {\n        const styleString = JSON.stringify(this.computedStyle);\n        return this._hashString(styleString);\n    }\n    _hashString(str) {\n        let hash = 0;\n        for (let i = 0; i < str.length; i++) {\n            const char = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash; // Convert to 32-bit integer\n        }\n        return hash.toString(36);\n    }\n    onStyleChange(listener) {\n        this._styleChangeListeners.push(listener);\n        return () => {\n            const index = this._styleChangeListeners.indexOf(listener);\n            if (index > -1) {\n                this._styleChangeListeners.splice(index, 1);\n            }\n        };\n    }\n    _notifyStyleChange() {\n        this._styleChangeListeners.forEach(listener => listener(this));\n    }\n    // Enhanced update methods that notify listeners\n    updateStyle(newStyle) {\n        this._style = { ...this._style, ...newStyle };\n        this._notifyStyleChange();\n    }\n    overrideStyle(overrides) {\n        this._overrides = { ...this._overrides, ...overrides };\n        this._notifyStyleChange();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}