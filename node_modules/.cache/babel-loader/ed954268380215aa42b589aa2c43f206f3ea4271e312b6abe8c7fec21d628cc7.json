{"ast":null,"code":"export class QElementValidator {\n  constructor() {\n    this._rules = new Map();\n    this._globalRules = [];\n    this._initializeDefaultRules();\n  }\n  _initializeDefaultRules() {\n    // Add default validation rules\n    this.addGlobalRule({\n      property: 'width',\n      validator: value => {\n        if (typeof value === 'number') return value >= 0;\n        if (typeof value === 'string') {\n          return /^(\\d+(\\.\\d+)?(px|em|rem|%|vh|vw|auto))$/.test(value) || value === 'auto';\n        }\n        return false;\n      },\n      message: 'Width must be a positive number or valid CSS unit'\n    });\n    this.addGlobalRule({\n      property: 'height',\n      validator: value => {\n        if (typeof value === 'number') return value >= 0;\n        if (typeof value === 'string') {\n          return /^(\\d+(\\.\\d+)?(px|em|rem|%|vh|vw|auto))$/.test(value) || value === 'auto';\n        }\n        return false;\n      },\n      message: 'Height must be a positive number or valid CSS unit'\n    });\n    this.addGlobalRule({\n      property: 'opacity',\n      validator: value => {\n        return typeof value === 'number' && value >= 0 && value <= 1;\n      },\n      message: 'Opacity must be a number between 0 and 1'\n    });\n    this.addGlobalRule({\n      property: 'zIndex',\n      validator: value => {\n        return typeof value === 'number' && Number.isInteger(value);\n      },\n      message: 'Z-index must be an integer'\n    });\n    this.addGlobalRule({\n      property: 'fontSize',\n      validator: value => {\n        if (typeof value === 'number') return value > 0;\n        if (typeof value === 'string') {\n          return /^(\\d+(\\.\\d+)?(px|em|rem|%))$/.test(value);\n        }\n        return false;\n      },\n      message: 'Font size must be a positive number or valid CSS unit'\n    });\n  }\n\n  // Add a validation rule for a specific property\n  addRule(property, rule) {\n    if (!this._rules.has(property)) {\n      this._rules.set(property, []);\n    }\n    this._rules.get(property).push(rule);\n  }\n\n  // Add a global validation rule\n  addGlobalRule(rule) {\n    this._globalRules.push(rule);\n  }\n\n  // Remove a validation rule\n  removeRule(property, ruleIndex) {\n    const rules = this._rules.get(property);\n    if (rules && ruleIndex >= 0 && ruleIndex < rules.length) {\n      rules.splice(ruleIndex, 1);\n    }\n  }\n\n  // Remove a global validation rule\n  removeGlobalRule(ruleIndex) {\n    if (ruleIndex >= 0 && ruleIndex < this._globalRules.length) {\n      this._globalRules.splice(ruleIndex, 1);\n    }\n  }\n\n  // Validate a style object\n  validate(style) {\n    const errors = [];\n    const warnings = [];\n\n    // Validate each property\n    Object.entries(style).forEach(([property, value]) => {\n      // Check property-specific rules\n      const propertyRules = this._rules.get(property) || [];\n      propertyRules.forEach(rule => {\n        if (!rule.validator(value)) {\n          errors.push(`${property}: ${rule.message}`);\n        }\n      });\n\n      // Check global rules\n      this._globalRules.forEach(rule => {\n        if (rule.property === property && !rule.validator(value)) {\n          errors.push(`${property}: ${rule.message}`);\n        }\n      });\n\n      // Add warnings for potentially problematic values\n      this._addWarnings(property, value, warnings);\n    });\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  // Add warnings for potentially problematic values\n  _addWarnings(property, value, warnings) {\n    // Warning for very large values\n    if (typeof value === 'number' && value > 10000) {\n      warnings.push(`${property}: Very large value (${value}) may cause performance issues`);\n    }\n\n    // Warning for negative margins (can be intentional but worth noting)\n    if (property === 'margin' && typeof value === 'number' && value < 0) {\n      warnings.push(`${property}: Negative margin (${value}) may cause layout issues`);\n    }\n\n    // Warning for missing units on numeric values\n    if (typeof value === 'number' && ['width', 'height', 'fontSize'].includes(property)) {\n      warnings.push(`${property}: Numeric value (${value}) without unit will be treated as pixels`);\n    }\n  }\n\n  // Validate a single property\n  validateProperty(property, value) {\n    const errors = [];\n    const warnings = [];\n\n    // Check property-specific rules\n    const propertyRules = this._rules.get(property) || [];\n    propertyRules.forEach(rule => {\n      if (!rule.validator(value)) {\n        errors.push(`${property}: ${rule.message}`);\n      }\n    });\n\n    // Check global rules\n    this._globalRules.forEach(rule => {\n      if (rule.property === property && !rule.validator(value)) {\n        errors.push(`${property}: ${rule.message}`);\n      }\n    });\n\n    // Add warnings\n    this._addWarnings(property, value, warnings);\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  // Get all validation rules for a property\n  getRules(property) {\n    return this._rules.get(property) || [];\n  }\n\n  // Get all global validation rules\n  getGlobalRules() {\n    return [...this._globalRules];\n  }\n\n  // Clear all rules\n  clearRules() {\n    this._rules.clear();\n    this._globalRules = [];\n  }\n\n  // Clear rules for a specific property\n  clearPropertyRules(property) {\n    this._rules.delete(property);\n  }\n}","map":{"version":3,"names":["QElementValidator","constructor","_rules","Map","_globalRules","_initializeDefaultRules","addGlobalRule","property","validator","value","test","message","Number","isInteger","addRule","rule","has","set","get","push","removeRule","ruleIndex","rules","length","splice","removeGlobalRule","validate","style","errors","warnings","Object","entries","forEach","propertyRules","_addWarnings","isValid","includes","validateProperty","getRules","getGlobalRules","clearRules","clear","clearPropertyRules","delete"],"sources":["/Users/jayson/Downloads/QElements_Demo/src/qelements/QElementValidator.ts"],"sourcesContent":["import { QElementStyle, QElementValidationRule, QElementValidationResult } from './types';\n\nexport class QElementValidator {\n  private _rules: Map<string, QElementValidationRule[]> = new Map();\n  private _globalRules: QElementValidationRule[] = [];\n\n  constructor() {\n    this._initializeDefaultRules();\n  }\n\n  private _initializeDefaultRules(): void {\n    // Add default validation rules\n    this.addGlobalRule({\n      property: 'width',\n      validator: (value) => {\n        if (typeof value === 'number') return value >= 0;\n        if (typeof value === 'string') {\n          return /^(\\d+(\\.\\d+)?(px|em|rem|%|vh|vw|auto))$/.test(value) || value === 'auto';\n        }\n        return false;\n      },\n      message: 'Width must be a positive number or valid CSS unit'\n    });\n\n    this.addGlobalRule({\n      property: 'height',\n      validator: (value) => {\n        if (typeof value === 'number') return value >= 0;\n        if (typeof value === 'string') {\n          return /^(\\d+(\\.\\d+)?(px|em|rem|%|vh|vw|auto))$/.test(value) || value === 'auto';\n        }\n        return false;\n      },\n      message: 'Height must be a positive number or valid CSS unit'\n    });\n\n    this.addGlobalRule({\n      property: 'opacity',\n      validator: (value) => {\n        return typeof value === 'number' && value >= 0 && value <= 1;\n      },\n      message: 'Opacity must be a number between 0 and 1'\n    });\n\n    this.addGlobalRule({\n      property: 'zIndex',\n      validator: (value) => {\n        return typeof value === 'number' && Number.isInteger(value);\n      },\n      message: 'Z-index must be an integer'\n    });\n\n    this.addGlobalRule({\n      property: 'fontSize',\n      validator: (value) => {\n        if (typeof value === 'number') return value > 0;\n        if (typeof value === 'string') {\n          return /^(\\d+(\\.\\d+)?(px|em|rem|%))$/.test(value);\n        }\n        return false;\n      },\n      message: 'Font size must be a positive number or valid CSS unit'\n    });\n  }\n\n  // Add a validation rule for a specific property\n  addRule(property: string, rule: QElementValidationRule): void {\n    if (!this._rules.has(property)) {\n      this._rules.set(property, []);\n    }\n    this._rules.get(property)!.push(rule);\n  }\n\n  // Add a global validation rule\n  addGlobalRule(rule: QElementValidationRule): void {\n    this._globalRules.push(rule);\n  }\n\n  // Remove a validation rule\n  removeRule(property: string, ruleIndex: number): void {\n    const rules = this._rules.get(property);\n    if (rules && ruleIndex >= 0 && ruleIndex < rules.length) {\n      rules.splice(ruleIndex, 1);\n    }\n  }\n\n  // Remove a global validation rule\n  removeGlobalRule(ruleIndex: number): void {\n    if (ruleIndex >= 0 && ruleIndex < this._globalRules.length) {\n      this._globalRules.splice(ruleIndex, 1);\n    }\n  }\n\n  // Validate a style object\n  validate(style: QElementStyle): QElementValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Validate each property\n    Object.entries(style).forEach(([property, value]) => {\n      // Check property-specific rules\n      const propertyRules = this._rules.get(property) || [];\n      propertyRules.forEach(rule => {\n        if (!rule.validator(value)) {\n          errors.push(`${property}: ${rule.message}`);\n        }\n      });\n\n      // Check global rules\n      this._globalRules.forEach(rule => {\n        if (rule.property === property && !rule.validator(value)) {\n          errors.push(`${property}: ${rule.message}`);\n        }\n      });\n\n      // Add warnings for potentially problematic values\n      this._addWarnings(property, value, warnings);\n    });\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  // Add warnings for potentially problematic values\n  private _addWarnings(property: string, value: any, warnings: string[]): void {\n    // Warning for very large values\n    if (typeof value === 'number' && value > 10000) {\n      warnings.push(`${property}: Very large value (${value}) may cause performance issues`);\n    }\n\n    // Warning for negative margins (can be intentional but worth noting)\n    if (property === 'margin' && typeof value === 'number' && value < 0) {\n      warnings.push(`${property}: Negative margin (${value}) may cause layout issues`);\n    }\n\n    // Warning for missing units on numeric values\n    if (typeof value === 'number' && ['width', 'height', 'fontSize'].includes(property)) {\n      warnings.push(`${property}: Numeric value (${value}) without unit will be treated as pixels`);\n    }\n  }\n\n  // Validate a single property\n  validateProperty(property: string, value: any): QElementValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Check property-specific rules\n    const propertyRules = this._rules.get(property) || [];\n    propertyRules.forEach(rule => {\n      if (!rule.validator(value)) {\n        errors.push(`${property}: ${rule.message}`);\n      }\n    });\n\n    // Check global rules\n    this._globalRules.forEach(rule => {\n      if (rule.property === property && !rule.validator(value)) {\n        errors.push(`${property}: ${rule.message}`);\n      }\n    });\n\n    // Add warnings\n    this._addWarnings(property, value, warnings);\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  // Get all validation rules for a property\n  getRules(property: string): QElementValidationRule[] {\n    return this._rules.get(property) || [];\n  }\n\n  // Get all global validation rules\n  getGlobalRules(): QElementValidationRule[] {\n    return [...this._globalRules];\n  }\n\n  // Clear all rules\n  clearRules(): void {\n    this._rules.clear();\n    this._globalRules = [];\n  }\n\n  // Clear rules for a specific property\n  clearPropertyRules(property: string): void {\n    this._rules.delete(property);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}