{"ast":null,"code":"import { QElement } from './QElement';\nexport class QElementManager {\n  constructor() {\n    this._elements = new Map();\n    this._rootElements = [];\n  }\n  // Register an element\n  register(element) {\n    this._elements.set(element.id, element);\n    if (!element.parent) {\n      this._rootElements.push(element);\n    }\n  }\n  // Unregister an element\n  unregister(id) {\n    const element = this._elements.get(id);\n    if (element) {\n      // Remove from parent if it has one\n      if (element.parent) {\n        element.parent.removeChild(element);\n      } else {\n        // Remove from root elements\n        const index = this._rootElements.indexOf(element);\n        if (index > -1) {\n          this._rootElements.splice(index, 1);\n        }\n      }\n      this._elements.delete(id);\n    }\n  }\n  // Get an element by ID\n  getElement(id) {\n    return this._elements.get(id) || null;\n  }\n  // Get all root elements\n  getRootElements() {\n    return [...this._rootElements];\n  }\n  // Get all elements\n  getAllElements() {\n    return Array.from(this._elements.values());\n  }\n  // Create a new element and register it\n  createElement(id, style = {}) {\n    const element = new QElement(id, style);\n    this.register(element);\n    return element;\n  }\n  // Update a parent element's style (affects all children)\n  updateParentStyle(id, newStyle) {\n    const element = this._elements.get(id);\n    if (element) {\n      element.updateStyle(newStyle);\n    }\n  }\n  // Override a child element's style (only affects that child)\n  overrideChildStyle(id, overrides) {\n    const element = this._elements.get(id);\n    if (element) {\n      element.overrideStyle(overrides);\n    }\n  }\n  // Reset a child's overrides\n  resetChildOverrides(id) {\n    const element = this._elements.get(id);\n    if (element) {\n      element.resetOverrides();\n    }\n  }\n  // Get computed style for an element\n  getComputedStyle(id) {\n    const element = this._elements.get(id);\n    return element ? element.computedStyle : null;\n  }\n  // Find element by ID (searches all elements)\n  findElement(id) {\n    return this._elements.get(id) || null;\n  }\n  // Clear all elements\n  clear() {\n    this._elements.clear();\n    this._rootElements = [];\n  }\n  // Export all elements as configuration\n  exportConfig() {\n    return {\n      rootElements: this._rootElements.map(element => element.toConfig())\n    };\n  }\n  // Import elements from configuration\n  importConfig(config) {\n    this.clear();\n    if (config.rootElements) {\n      config.rootElements.forEach(elementConfig => {\n        const element = QElement.fromConfig(elementConfig);\n        this.register(element);\n      });\n    }\n  }\n}","map":{"version":3,"names":["QElement","QElementManager","constructor","_elements","Map","_rootElements","register","element","set","id","parent","push","unregister","get","removeChild","index","indexOf","splice","delete","getElement","getRootElements","getAllElements","Array","from","values","createElement","style","updateParentStyle","newStyle","updateStyle","overrideChildStyle","overrides","overrideStyle","resetChildOverrides","resetOverrides","getComputedStyle","computedStyle","findElement","clear","exportConfig","rootElements","map","toConfig","importConfig","config","forEach","elementConfig","fromConfig"],"sources":["/Users/jayson/Downloads/QElement/dist/QElementManager.js"],"sourcesContent":["import { QElement } from './QElement';\nexport class QElementManager {\n    constructor() {\n        this._elements = new Map();\n        this._rootElements = [];\n    }\n    // Register an element\n    register(element) {\n        this._elements.set(element.id, element);\n        if (!element.parent) {\n            this._rootElements.push(element);\n        }\n    }\n    // Unregister an element\n    unregister(id) {\n        const element = this._elements.get(id);\n        if (element) {\n            // Remove from parent if it has one\n            if (element.parent) {\n                element.parent.removeChild(element);\n            }\n            else {\n                // Remove from root elements\n                const index = this._rootElements.indexOf(element);\n                if (index > -1) {\n                    this._rootElements.splice(index, 1);\n                }\n            }\n            this._elements.delete(id);\n        }\n    }\n    // Get an element by ID\n    getElement(id) {\n        return this._elements.get(id) || null;\n    }\n    // Get all root elements\n    getRootElements() {\n        return [...this._rootElements];\n    }\n    // Get all elements\n    getAllElements() {\n        return Array.from(this._elements.values());\n    }\n    // Create a new element and register it\n    createElement(id, style = {}) {\n        const element = new QElement(id, style);\n        this.register(element);\n        return element;\n    }\n    // Update a parent element's style (affects all children)\n    updateParentStyle(id, newStyle) {\n        const element = this._elements.get(id);\n        if (element) {\n            element.updateStyle(newStyle);\n        }\n    }\n    // Override a child element's style (only affects that child)\n    overrideChildStyle(id, overrides) {\n        const element = this._elements.get(id);\n        if (element) {\n            element.overrideStyle(overrides);\n        }\n    }\n    // Reset a child's overrides\n    resetChildOverrides(id) {\n        const element = this._elements.get(id);\n        if (element) {\n            element.resetOverrides();\n        }\n    }\n    // Get computed style for an element\n    getComputedStyle(id) {\n        const element = this._elements.get(id);\n        return element ? element.computedStyle : null;\n    }\n    // Find element by ID (searches all elements)\n    findElement(id) {\n        return this._elements.get(id) || null;\n    }\n    // Clear all elements\n    clear() {\n        this._elements.clear();\n        this._rootElements = [];\n    }\n    // Export all elements as configuration\n    exportConfig() {\n        return {\n            rootElements: this._rootElements.map(element => element.toConfig())\n        };\n    }\n    // Import elements from configuration\n    importConfig(config) {\n        this.clear();\n        if (config.rootElements) {\n            config.rootElements.forEach((elementConfig) => {\n                const element = QElement.fromConfig(elementConfig);\n                this.register(element);\n            });\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}