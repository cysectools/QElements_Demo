{"ast":null,"code":"import { QElementValidator } from './QElementValidator';\nimport { QElementThemeManager } from './QElementTheme';\nimport { QElementResponsiveManager } from './QElementResponsive';\nexport class QElement {\n  constructor(id, style = {}, metadata = {}, validator, themeManager, responsiveManager) {\n    this._id = void 0;\n    this._style = void 0;\n    this._parent = null;\n    this._children = [];\n    this._overrides = {};\n    this._metadata = {};\n    this._animations = new Map();\n    this._validator = void 0;\n    this._themeManager = void 0;\n    this._responsiveManager = void 0;\n    this._isVisible = true;\n    this._isEnabled = true;\n    // Event system for style changes\n    this._styleChangeListeners = [];\n    this._id = id;\n    this._style = {\n      ...style\n    };\n    this._metadata = {\n      ...metadata\n    };\n    this._validator = validator || new QElementValidator();\n    this._themeManager = themeManager || new QElementThemeManager();\n    this._responsiveManager = responsiveManager || new QElementResponsiveManager();\n  }\n  get id() {\n    return this._id;\n  }\n  get style() {\n    return this._style;\n  }\n  get parent() {\n    return this._parent;\n  }\n  get children() {\n    return [...this._children];\n  }\n  get overrides() {\n    return {\n      ...this._overrides\n    };\n  }\n\n  // Get the computed style (parent styles + overrides + theme + responsive)\n  get computedStyle() {\n    var _this$_parent;\n    const parentStyle = ((_this$_parent = this._parent) === null || _this$_parent === void 0 ? void 0 : _this$_parent.computedStyle) || {};\n    const baseStyle = {\n      ...parentStyle,\n      ...this._overrides\n    };\n\n    // Apply theme variables\n    const themedStyle = this._themeManager.applyThemeVariables(baseStyle);\n\n    // Apply responsive styles\n    const responsiveStyle = this._responsiveManager.getResponsiveStyles(themedStyle);\n    return responsiveStyle;\n  }\n\n  // Set parent element\n  setParent(parent) {\n    if (this._parent) {\n      this._parent.removeChild(this);\n    }\n    this._parent = parent;\n    parent._children.push(this);\n  }\n\n  // Add child element\n  addChild(child) {\n    child.setParent(this);\n  }\n\n  // Remove child element\n  removeChild(child) {\n    const index = this._children.indexOf(child);\n    if (index > -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n    }\n  }\n\n  // Reset overrides to parent values\n  resetOverrides() {\n    this._overrides = {};\n  }\n\n  // Get a specific style property (with inheritance)\n  getStyleProperty(property) {\n    const computed = this.computedStyle;\n    return computed[property];\n  }\n\n  // Set a specific style property (as override)\n  setStyleProperty(property, value) {\n    this.overrideStyle({\n      [property]: value\n    });\n  }\n\n  // Convert to configuration object\n  toConfig() {\n    return {\n      id: this._id,\n      style: this._style,\n      children: this._children.map(child => child.toConfig())\n    };\n  }\n\n  // Create from configuration\n  static fromConfig(config) {\n    const element = new QElement(config.id, config.style);\n    if (config.children) {\n      config.children.forEach(childConfig => {\n        const child = QElement.fromConfig(childConfig);\n        element.addChild(child);\n      });\n    }\n    return element;\n  }\n\n  // Find element by ID\n  findById(id) {\n    if (this._id === id) {\n      return this;\n    }\n    for (const child of this._children) {\n      const found = child.findById(id);\n      if (found) return found;\n    }\n    return null;\n  }\n\n  // Get all descendants\n  getAllDescendants() {\n    const descendants = [];\n    for (const child of this._children) {\n      descendants.push(child);\n      descendants.push(...child.getAllDescendants());\n    }\n    return descendants;\n  }\n\n  // Clone the element\n  clone() {\n    return QElement.fromConfig(this.toConfig());\n  }\n\n  // Enhanced methods for advanced features\n\n  // Metadata management\n  get metadata() {\n    return {\n      ...this._metadata\n    };\n  }\n  updateMetadata(metadata) {\n    this._metadata = {\n      ...this._metadata,\n      ...metadata,\n      updatedAt: new Date()\n    };\n  }\n\n  // Visibility and state management\n  get isVisible() {\n    return this._isVisible;\n  }\n  get isEnabled() {\n    return this._isEnabled;\n  }\n  setVisible(visible) {\n    this._isVisible = visible;\n  }\n  setEnabled(enabled) {\n    this._isEnabled = enabled;\n  }\n\n  // Animation management\n  addAnimation(name, animation) {\n    this._animations.set(name, animation);\n  }\n  removeAnimation(name) {\n    this._animations.delete(name);\n  }\n  getAnimation(name) {\n    return this._animations.get(name);\n  }\n  getAllAnimations() {\n    return Array.from(this._animations.values());\n  }\n\n  // Style validation\n  validateStyle() {\n    return this._validator.validate(this._style);\n  }\n  validateOverrides() {\n    return this._validator.validate(this._overrides);\n  }\n\n  // Theme management\n  applyTheme(themeName) {\n    this._themeManager.setCurrentTheme(themeName);\n  }\n  getCurrentTheme() {\n    return this._themeManager.getCurrentTheme().name;\n  }\n\n  // Responsive management\n  getCurrentBreakpoint() {\n    return this._responsiveManager.getCurrentBreakpoint();\n  }\n  createResponsiveStyles(responsiveStyles) {\n    const responsiveStyle = this._responsiveManager.createResponsiveStyles(this._style, responsiveStyles);\n    this.updateStyle(responsiveStyle);\n  }\n\n  // Advanced style operations\n  mergeStyle(newStyle, deep = false) {\n    if (deep) {\n      this._style = this._deepMerge(this._style, newStyle);\n    } else {\n      this._style = {\n        ...this._style,\n        ...newStyle\n      };\n    }\n  }\n  _deepMerge(target, source) {\n    const result = {\n      ...target\n    };\n    for (const key in source) {\n      if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\n        result[key] = this._deepMerge(target[key] || {}, source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    }\n    return result;\n  }\n\n  // Style inheritance control\n  inheritFromParent(properties) {\n    if (this._parent) {\n      const parentStyle = this._parent.computedStyle;\n      const inheritedStyle = {};\n      properties.forEach(prop => {\n        if (parentStyle[prop] !== undefined) {\n          inheritedStyle[prop] = parentStyle[prop];\n        }\n      });\n      this.overrideStyle(inheritedStyle);\n    }\n  }\n\n  // Style reset methods\n  resetToParent() {\n    this._overrides = {};\n  }\n  resetToDefault() {\n    this._style = {};\n    this._overrides = {};\n  }\n\n  // Performance and optimization\n  getStyleHash() {\n    const styleString = JSON.stringify(this.computedStyle);\n    return this._hashString(styleString);\n  }\n  _hashString(str) {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return hash.toString(36);\n  }\n  onStyleChange(listener) {\n    this._styleChangeListeners.push(listener);\n    return () => {\n      const index = this._styleChangeListeners.indexOf(listener);\n      if (index > -1) {\n        this._styleChangeListeners.splice(index, 1);\n      }\n    };\n  }\n  _notifyStyleChange() {\n    this._styleChangeListeners.forEach(listener => listener(this));\n  }\n\n  // Enhanced update methods that notify listeners\n  updateStyle(newStyle) {\n    this._style = {\n      ...this._style,\n      ...newStyle\n    };\n    this._notifyStyleChange();\n  }\n  overrideStyle(overrides) {\n    this._overrides = {\n      ...this._overrides,\n      ...overrides\n    };\n    this._notifyStyleChange();\n  }\n}","map":{"version":3,"names":["QElementValidator","QElementThemeManager","QElementResponsiveManager","QElement","constructor","id","style","metadata","validator","themeManager","responsiveManager","_id","_style","_parent","_children","_overrides","_metadata","_animations","Map","_validator","_themeManager","_responsiveManager","_isVisible","_isEnabled","_styleChangeListeners","parent","children","overrides","computedStyle","_this$_parent","parentStyle","baseStyle","themedStyle","applyThemeVariables","responsiveStyle","getResponsiveStyles","setParent","removeChild","push","addChild","child","index","indexOf","splice","resetOverrides","getStyleProperty","property","computed","setStyleProperty","value","overrideStyle","toConfig","map","fromConfig","config","element","forEach","childConfig","findById","found","getAllDescendants","descendants","clone","updateMetadata","updatedAt","Date","isVisible","isEnabled","setVisible","visible","setEnabled","enabled","addAnimation","name","animation","set","removeAnimation","delete","getAnimation","get","getAllAnimations","Array","from","values","validateStyle","validate","validateOverrides","applyTheme","themeName","setCurrentTheme","getCurrentTheme","getCurrentBreakpoint","createResponsiveStyles","responsiveStyles","updateStyle","mergeStyle","newStyle","deep","_deepMerge","target","source","result","key","isArray","inheritFromParent","properties","inheritedStyle","prop","undefined","resetToParent","resetToDefault","getStyleHash","styleString","JSON","stringify","_hashString","str","hash","i","length","char","charCodeAt","toString","onStyleChange","listener","_notifyStyleChange"],"sources":["/Users/jayson/Downloads/QElements_Demo/src/qelements/QElement.ts"],"sourcesContent":["import { QElementStyle, QElementConfig, QElementMetadata, QElementAnimation } from './types';\nimport { QElementValidator } from './QElementValidator';\nimport { QElementThemeManager } from './QElementTheme';\nimport { QElementResponsiveManager } from './QElementResponsive';\n\nexport class QElement {\n  private _id: string;\n  private _style: QElementStyle;\n  private _parent: QElement | null = null;\n  private _children: QElement[] = [];\n  private _overrides: QElementStyle = {};\n  private _metadata: QElementMetadata = {};\n  private _animations: Map<string, QElementAnimation> = new Map();\n  private _validator: QElementValidator;\n  private _themeManager: QElementThemeManager;\n  private _responsiveManager: QElementResponsiveManager;\n  private _isVisible: boolean = true;\n  private _isEnabled: boolean = true;\n\n  constructor(\n    id: string, \n    style: QElementStyle = {},\n    metadata: QElementMetadata = {},\n    validator?: QElementValidator,\n    themeManager?: QElementThemeManager,\n    responsiveManager?: QElementResponsiveManager\n  ) {\n    this._id = id;\n    this._style = { ...style };\n    this._metadata = { ...metadata };\n    this._validator = validator || new QElementValidator();\n    this._themeManager = themeManager || new QElementThemeManager();\n    this._responsiveManager = responsiveManager || new QElementResponsiveManager();\n  }\n\n  get id(): string {\n    return this._id;\n  }\n\n  get style(): QElementStyle {\n    return this._style;\n  }\n\n  get parent(): QElement | null {\n    return this._parent;\n  }\n\n  get children(): QElement[] {\n    return [...this._children];\n  }\n\n  get overrides(): QElementStyle {\n    return { ...this._overrides };\n  }\n\n  // Get the computed style (parent styles + overrides + theme + responsive)\n  get computedStyle(): QElementStyle {\n    const parentStyle = this._parent?.computedStyle || {};\n    const baseStyle = { ...parentStyle, ...this._overrides };\n    \n    // Apply theme variables\n    const themedStyle = this._themeManager.applyThemeVariables(baseStyle);\n    \n    // Apply responsive styles\n    const responsiveStyle = this._responsiveManager.getResponsiveStyles(themedStyle);\n    \n    return responsiveStyle;\n  }\n\n  // Set parent element\n  setParent(parent: QElement): void {\n    if (this._parent) {\n      this._parent.removeChild(this);\n    }\n    this._parent = parent;\n    parent._children.push(this);\n  }\n\n  // Add child element\n  addChild(child: QElement): void {\n    child.setParent(this);\n  }\n\n  // Remove child element\n  removeChild(child: QElement): void {\n    const index = this._children.indexOf(child);\n    if (index > -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n    }\n  }\n\n\n  // Reset overrides to parent values\n  resetOverrides(): void {\n    this._overrides = {};\n  }\n\n  // Get a specific style property (with inheritance)\n  getStyleProperty(property: string): any {\n    const computed = this.computedStyle;\n    return computed[property];\n  }\n\n  // Set a specific style property (as override)\n  setStyleProperty(property: string, value: any): void {\n    this.overrideStyle({ [property]: value });\n  }\n\n  // Convert to configuration object\n  toConfig(): QElementConfig {\n    return {\n      id: this._id,\n      style: this._style,\n      children: this._children.map(child => child.toConfig())\n    };\n  }\n\n  // Create from configuration\n  static fromConfig(config: QElementConfig): QElement {\n    const element = new QElement(config.id, config.style);\n    if (config.children) {\n      config.children.forEach(childConfig => {\n        const child = QElement.fromConfig(childConfig);\n        element.addChild(child);\n      });\n    }\n    return element;\n  }\n\n  // Find element by ID\n  findById(id: string): QElement | null {\n    if (this._id === id) {\n      return this;\n    }\n    for (const child of this._children) {\n      const found = child.findById(id);\n      if (found) return found;\n    }\n    return null;\n  }\n\n  // Get all descendants\n  getAllDescendants(): QElement[] {\n    const descendants: QElement[] = [];\n    for (const child of this._children) {\n      descendants.push(child);\n      descendants.push(...child.getAllDescendants());\n    }\n    return descendants;\n  }\n\n  // Clone the element\n  clone(): QElement {\n    return QElement.fromConfig(this.toConfig());\n  }\n\n  // Enhanced methods for advanced features\n\n  // Metadata management\n  get metadata(): QElementMetadata {\n    return { ...this._metadata };\n  }\n\n  updateMetadata(metadata: Partial<QElementMetadata>): void {\n    this._metadata = { ...this._metadata, ...metadata, updatedAt: new Date() };\n  }\n\n  // Visibility and state management\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  get isEnabled(): boolean {\n    return this._isEnabled;\n  }\n\n  setVisible(visible: boolean): void {\n    this._isVisible = visible;\n  }\n\n  setEnabled(enabled: boolean): void {\n    this._isEnabled = enabled;\n  }\n\n  // Animation management\n  addAnimation(name: string, animation: QElementAnimation): void {\n    this._animations.set(name, animation);\n  }\n\n  removeAnimation(name: string): void {\n    this._animations.delete(name);\n  }\n\n  getAnimation(name: string): QElementAnimation | undefined {\n    return this._animations.get(name);\n  }\n\n  getAllAnimations(): QElementAnimation[] {\n    return Array.from(this._animations.values());\n  }\n\n  // Style validation\n  validateStyle(): { isValid: boolean; errors: string[]; warnings: string[] } {\n    return this._validator.validate(this._style);\n  }\n\n  validateOverrides(): { isValid: boolean; errors: string[]; warnings: string[] } {\n    return this._validator.validate(this._overrides);\n  }\n\n  // Theme management\n  applyTheme(themeName: string): void {\n    this._themeManager.setCurrentTheme(themeName);\n  }\n\n  getCurrentTheme(): string {\n    return this._themeManager.getCurrentTheme().name;\n  }\n\n  // Responsive management\n  getCurrentBreakpoint(): string {\n    return this._responsiveManager.getCurrentBreakpoint();\n  }\n\n  createResponsiveStyles(responsiveStyles: { [breakpoint: string]: Partial<QElementStyle> }): void {\n    const responsiveStyle = this._responsiveManager.createResponsiveStyles(this._style, responsiveStyles);\n    this.updateStyle(responsiveStyle);\n  }\n\n  // Advanced style operations\n  mergeStyle(newStyle: Partial<QElementStyle>, deep: boolean = false): void {\n    if (deep) {\n      this._style = this._deepMerge(this._style, newStyle);\n    } else {\n      this._style = { ...this._style, ...newStyle };\n    }\n  }\n\n  private _deepMerge(target: any, source: any): any {\n    const result = { ...target };\n    \n    for (const key in source) {\n      if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\n        result[key] = this._deepMerge(target[key] || {}, source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    }\n    \n    return result;\n  }\n\n  // Style inheritance control\n  inheritFromParent(properties: string[]): void {\n    if (this._parent) {\n      const parentStyle = this._parent.computedStyle;\n      const inheritedStyle: QElementStyle = {};\n      \n      properties.forEach(prop => {\n        if (parentStyle[prop] !== undefined) {\n          inheritedStyle[prop] = parentStyle[prop];\n        }\n      });\n      \n      this.overrideStyle(inheritedStyle);\n    }\n  }\n\n  // Style reset methods\n  resetToParent(): void {\n    this._overrides = {};\n  }\n\n  resetToDefault(): void {\n    this._style = {};\n    this._overrides = {};\n  }\n\n  // Performance and optimization\n  getStyleHash(): string {\n    const styleString = JSON.stringify(this.computedStyle);\n    return this._hashString(styleString);\n  }\n\n  private _hashString(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return hash.toString(36);\n  }\n\n  // Event system for style changes\n  private _styleChangeListeners: ((element: QElement) => void)[] = [];\n\n  onStyleChange(listener: (element: QElement) => void): () => void {\n    this._styleChangeListeners.push(listener);\n    return () => {\n      const index = this._styleChangeListeners.indexOf(listener);\n      if (index > -1) {\n        this._styleChangeListeners.splice(index, 1);\n      }\n    };\n  }\n\n  private _notifyStyleChange(): void {\n    this._styleChangeListeners.forEach(listener => listener(this));\n  }\n\n  // Enhanced update methods that notify listeners\n  updateStyle(newStyle: Partial<QElementStyle>): void {\n    this._style = { ...this._style, ...newStyle };\n    this._notifyStyleChange();\n  }\n\n  overrideStyle(overrides: Partial<QElementStyle>): void {\n    this._overrides = { ...this._overrides, ...overrides };\n    this._notifyStyleChange();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}