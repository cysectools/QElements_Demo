{"ast":null,"code":"// =============================================================================\n// ðŸŽ¯ PARENT FILE - Parent Styles Provider\n// =============================================================================\n// This is a PARENT FILE that applies all parent styles to the QElements system.\n// It wraps the QElementProvider and automatically applies parent styles.\n// All child components will inherit from these parent styles.\n// =============================================================================\nimport React,{useEffect}from'react';import{QElementProvider,useQElement}from'qelements';import{ParentStyles}from'./ParentStyles';import{Fragment as _Fragment,jsx as _jsx}from\"react/jsx-runtime\";export const ParentStylesProvider=_ref=>{let{children,theme='default'}=_ref;const{updateParentStyle,createElement}=useQElement();useEffect(()=>{// Apply root theme\nupdateParentStyle('root',ParentStyles.rootTheme);// Apply navigation parent styles\nupdateParentStyle('navigation',ParentStyles.navigationParent);// Apply button parent styles\nupdateParentStyle('button',ParentStyles.buttonParent);// Apply card parent styles\nupdateParentStyle('card',ParentStyles.cardParent);// Apply header parent styles\nupdateParentStyle('header',ParentStyles.headerParent);// Apply content parent styles\nupdateParentStyle('content',ParentStyles.contentParent);// Apply tooltip parent styles\nupdateParentStyle('tooltip',ParentStyles.tooltipParent);// Apply footer parent styles\nupdateParentStyle('footer',ParentStyles.footerParent);// Apply theme variation if specified\nif(theme!=='default'){const themeStyles=ParentStyles[theme];if(themeStyles){updateParentStyle('root',themeStyles);}}},[theme,updateParentStyle]);return/*#__PURE__*/_jsx(_Fragment,{children:children});};// =============================================================================\n// WRAPPED PROVIDER - Combines QElementProvider with ParentStylesProvider\n// =============================================================================\nexport const QElementsWithParents=_ref2=>{let{children,theme='default'}=_ref2;return/*#__PURE__*/_jsx(QElementProvider,{children:/*#__PURE__*/_jsx(ParentStylesProvider,{theme:theme,children:children})});};// =============================================================================\n// HOOK FOR ACCESSING PARENT STYLES - For components that need to modify parents\n// =============================================================================\nexport const useParentStyles=()=>{const{updateParentStyle,getComputedStyle}=useQElement();return{updateParentStyle,getComputedStyle,// Convenience methods for common parent updates\nupdateRootTheme:styles=>updateParentStyle('root',styles),updateNavigationTheme:styles=>updateParentStyle('navigation',styles),updateButtonTheme:styles=>updateParentStyle('button',styles),updateCardTheme:styles=>updateParentStyle('card',styles),updateHeaderTheme:styles=>updateParentStyle('header',styles),updateContentTheme:styles=>updateParentStyle('content',styles),updateTooltipTheme:styles=>updateParentStyle('tooltip',styles),updateFooterTheme:styles=>updateParentStyle('footer',styles)};};","map":{"version":3,"names":["React","useEffect","QElementProvider","useQElement","ParentStyles","Fragment","_Fragment","jsx","_jsx","ParentStylesProvider","_ref","children","theme","updateParentStyle","createElement","rootTheme","navigationParent","buttonParent","cardParent","headerParent","contentParent","tooltipParent","footerParent","themeStyles","QElementsWithParents","_ref2","useParentStyles","getComputedStyle","updateRootTheme","styles","updateNavigationTheme","updateButtonTheme","updateCardTheme","updateHeaderTheme","updateContentTheme","updateTooltipTheme","updateFooterTheme"],"sources":["/Users/jayson/Downloads/QElements_Demo/src/parent/ParentStylesProvider.tsx"],"sourcesContent":["// =============================================================================\n// ðŸŽ¯ PARENT FILE - Parent Styles Provider\n// =============================================================================\n// This is a PARENT FILE that applies all parent styles to the QElements system.\n// It wraps the QElementProvider and automatically applies parent styles.\n// All child components will inherit from these parent styles.\n// =============================================================================\n\nimport React, { useEffect } from 'react';\nimport { QElementProvider, useQElement } from 'qelements';\nimport { ParentStyles } from './ParentStyles';\ninterface ParentStylesProviderProps {\n  children: React.ReactNode;\n  theme?: 'default' | 'light' | 'blue' | 'purple';\n}\n\nexport const ParentStylesProvider: React.FC<ParentStylesProviderProps> = ({ \n  children, \n  theme = 'default' \n}) => {\n  const { updateParentStyle, createElement } = useQElement();\n\n  useEffect(() => {\n    // Apply root theme\n    updateParentStyle('root', ParentStyles.rootTheme);\n    \n    // Apply navigation parent styles\n    updateParentStyle('navigation', ParentStyles.navigationParent);\n    \n    // Apply button parent styles\n    updateParentStyle('button', ParentStyles.buttonParent);\n    \n    // Apply card parent styles\n    updateParentStyle('card', ParentStyles.cardParent);\n    \n    // Apply header parent styles\n    updateParentStyle('header', ParentStyles.headerParent);\n    \n    // Apply content parent styles\n    updateParentStyle('content', ParentStyles.contentParent);\n    \n    // Apply tooltip parent styles\n    updateParentStyle('tooltip', ParentStyles.tooltipParent);\n    \n    // Apply footer parent styles\n    updateParentStyle('footer', ParentStyles.footerParent);\n    \n    // Apply theme variation if specified\n    if (theme !== 'default') {\n      const themeStyles = ParentStyles[theme as keyof typeof ParentStyles];\n      if (themeStyles) {\n        updateParentStyle('root', themeStyles);\n      }\n    }\n  }, [theme, updateParentStyle]);\n\n  return <>{children}</>;\n};\n\n// =============================================================================\n// WRAPPED PROVIDER - Combines QElementProvider with ParentStylesProvider\n// =============================================================================\nexport const QElementsWithParents: React.FC<ParentStylesProviderProps> = ({ \n  children, \n  theme = 'default' \n}) => {\n  return (\n    <QElementProvider>\n      <ParentStylesProvider theme={theme}>\n        {children}\n      </ParentStylesProvider>\n    </QElementProvider>\n  );\n};\n\n// =============================================================================\n// HOOK FOR ACCESSING PARENT STYLES - For components that need to modify parents\n// =============================================================================\nexport const useParentStyles = () => {\n  const { updateParentStyle, getComputedStyle } = useQElement();\n  \n  return {\n    updateParentStyle,\n    getComputedStyle,\n    \n    // Convenience methods for common parent updates\n    updateRootTheme: (styles: any) => updateParentStyle('root', styles),\n    updateNavigationTheme: (styles: any) => updateParentStyle('navigation', styles),\n    updateButtonTheme: (styles: any) => updateParentStyle('button', styles),\n    updateCardTheme: (styles: any) => updateParentStyle('card', styles),\n    updateHeaderTheme: (styles: any) => updateParentStyle('header', styles),\n    updateContentTheme: (styles: any) => updateParentStyle('content', styles),\n    updateTooltipTheme: (styles: any) => updateParentStyle('tooltip', styles),\n    updateFooterTheme: (styles: any) => updateParentStyle('footer', styles),\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}