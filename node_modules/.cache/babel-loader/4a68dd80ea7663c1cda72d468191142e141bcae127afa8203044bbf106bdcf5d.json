{"ast":null,"code":"import { QElement } from './QElement';\nexport class QElementManager {\n  constructor() {\n    this._elements = new Map();\n    this._rootElements = [];\n  }\n  // Register an element\n  register(element) {\n    this._elements.set(element.id, element);\n    if (!element.parent) {\n      this._rootElements.push(element);\n    }\n  }\n\n  // Unregister an element\n  unregister(id) {\n    const element = this._elements.get(id);\n    if (element) {\n      // Remove from parent if it has one\n      if (element.parent) {\n        element.parent.removeChild(element);\n      } else {\n        // Remove from root elements\n        const index = this._rootElements.indexOf(element);\n        if (index > -1) {\n          this._rootElements.splice(index, 1);\n        }\n      }\n      this._elements.delete(id);\n    }\n  }\n\n  // Get an element by ID\n  getElement(id) {\n    return this._elements.get(id) || null;\n  }\n\n  // Get all root elements\n  getRootElements() {\n    return [...this._rootElements];\n  }\n\n  // Get all elements\n  getAllElements() {\n    return Array.from(this._elements.values());\n  }\n\n  // Create a new element and register it\n  createElement(id, style = {}) {\n    const element = new QElement(id, style);\n    this.register(element);\n    return element;\n  }\n\n  // Update a parent element's style (affects all children)\n  updateParentStyle(id, newStyle) {\n    const element = this._elements.get(id);\n    if (element) {\n      element.updateStyle(newStyle);\n    }\n  }\n\n  // Override a child element's style (only affects that child)\n  overrideChildStyle(id, overrides) {\n    const element = this._elements.get(id);\n    if (element) {\n      element.overrideStyle(overrides);\n    }\n  }\n\n  // Reset a child's overrides\n  resetChildOverrides(id) {\n    const element = this._elements.get(id);\n    if (element) {\n      element.resetOverrides();\n    }\n  }\n\n  // Get computed style for an element\n  getComputedStyle(id) {\n    const element = this._elements.get(id);\n    return element ? element.computedStyle : null;\n  }\n\n  // Find element by ID (searches all elements)\n  findElement(id) {\n    return this._elements.get(id) || null;\n  }\n\n  // Clear all elements\n  clear() {\n    this._elements.clear();\n    this._rootElements = [];\n  }\n\n  // Export all elements as configuration\n  exportConfig() {\n    return {\n      rootElements: this._rootElements.map(element => element.toConfig())\n    };\n  }\n\n  // Import elements from configuration\n  importConfig(config) {\n    this.clear();\n    if (config.rootElements) {\n      config.rootElements.forEach(elementConfig => {\n        const element = QElement.fromConfig(elementConfig);\n        this.register(element);\n      });\n    }\n  }\n}","map":{"version":3,"names":["QElement","QElementManager","constructor","_elements","Map","_rootElements","register","element","set","id","parent","push","unregister","get","removeChild","index","indexOf","splice","delete","getElement","getRootElements","getAllElements","Array","from","values","createElement","style","updateParentStyle","newStyle","updateStyle","overrideChildStyle","overrides","overrideStyle","resetChildOverrides","resetOverrides","getComputedStyle","computedStyle","findElement","clear","exportConfig","rootElements","map","toConfig","importConfig","config","forEach","elementConfig","fromConfig"],"sources":["/Users/jayson/Downloads/QElements_Demo/src/qelements/QElementManager.ts"],"sourcesContent":["import { QElement } from './QElement';\nimport { QElementStyle } from './types';\n\nexport class QElementManager {\n  private _elements: Map<string, QElement> = new Map();\n  private _rootElements: QElement[] = [];\n\n  // Register an element\n  register(element: QElement): void {\n    this._elements.set(element.id, element);\n    if (!element.parent) {\n      this._rootElements.push(element);\n    }\n  }\n\n  // Unregister an element\n  unregister(id: string): void {\n    const element = this._elements.get(id);\n    if (element) {\n      // Remove from parent if it has one\n      if (element.parent) {\n        element.parent.removeChild(element);\n      } else {\n        // Remove from root elements\n        const index = this._rootElements.indexOf(element);\n        if (index > -1) {\n          this._rootElements.splice(index, 1);\n        }\n      }\n      this._elements.delete(id);\n    }\n  }\n\n  // Get an element by ID\n  getElement(id: string): QElement | null {\n    return this._elements.get(id) || null;\n  }\n\n  // Get all root elements\n  getRootElements(): QElement[] {\n    return [...this._rootElements];\n  }\n\n  // Get all elements\n  getAllElements(): QElement[] {\n    return Array.from(this._elements.values());\n  }\n\n  // Create a new element and register it\n  createElement(id: string, style: QElementStyle = {}): QElement {\n    const element = new QElement(id, style);\n    this.register(element);\n    return element;\n  }\n\n  // Update a parent element's style (affects all children)\n  updateParentStyle(id: string, newStyle: Partial<QElementStyle>): void {\n    const element = this._elements.get(id);\n    if (element) {\n      element.updateStyle(newStyle);\n    }\n  }\n\n  // Override a child element's style (only affects that child)\n  overrideChildStyle(id: string, overrides: Partial<QElementStyle>): void {\n    const element = this._elements.get(id);\n    if (element) {\n      element.overrideStyle(overrides);\n    }\n  }\n\n  // Reset a child's overrides\n  resetChildOverrides(id: string): void {\n    const element = this._elements.get(id);\n    if (element) {\n      element.resetOverrides();\n    }\n  }\n\n  // Get computed style for an element\n  getComputedStyle(id: string): QElementStyle | null {\n    const element = this._elements.get(id);\n    return element ? element.computedStyle : null;\n  }\n\n  // Find element by ID (searches all elements)\n  findElement(id: string): QElement | null {\n    return this._elements.get(id) || null;\n  }\n\n  // Clear all elements\n  clear(): void {\n    this._elements.clear();\n    this._rootElements = [];\n  }\n\n  // Export all elements as configuration\n  exportConfig(): any {\n    return {\n      rootElements: this._rootElements.map(element => element.toConfig())\n    };\n  }\n\n  // Import elements from configuration\n  importConfig(config: any): void {\n    this.clear();\n    if (config.rootElements) {\n      config.rootElements.forEach((elementConfig: any) => {\n        const element = QElement.fromConfig(elementConfig);\n        this.register(element);\n      });\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}