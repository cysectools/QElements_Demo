{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QElementValidator = void 0;\nclass QElementValidator {\n  constructor() {\n    this._rules = new Map();\n    this._globalRules = [];\n    this._initializeDefaultRules();\n  }\n  _initializeDefaultRules() {\n    // Add default validation rules\n    this.addGlobalRule({\n      property: 'width',\n      validator: value => {\n        if (typeof value === 'number') return value >= 0;\n        if (typeof value === 'string') {\n          return /^(\\d+(\\.\\d+)?(px|em|rem|%|vh|vw|auto))$/.test(value) || value === 'auto';\n        }\n        return false;\n      },\n      message: 'Width must be a positive number or valid CSS unit'\n    });\n    this.addGlobalRule({\n      property: 'height',\n      validator: value => {\n        if (typeof value === 'number') return value >= 0;\n        if (typeof value === 'string') {\n          return /^(\\d+(\\.\\d+)?(px|em|rem|%|vh|vw|auto))$/.test(value) || value === 'auto';\n        }\n        return false;\n      },\n      message: 'Height must be a positive number or valid CSS unit'\n    });\n    this.addGlobalRule({\n      property: 'opacity',\n      validator: value => {\n        return typeof value === 'number' && value >= 0 && value <= 1;\n      },\n      message: 'Opacity must be a number between 0 and 1'\n    });\n    this.addGlobalRule({\n      property: 'zIndex',\n      validator: value => {\n        return typeof value === 'number' && Number.isInteger(value);\n      },\n      message: 'Z-index must be an integer'\n    });\n    this.addGlobalRule({\n      property: 'fontSize',\n      validator: value => {\n        if (typeof value === 'number') return value > 0;\n        if (typeof value === 'string') {\n          return /^(\\d+(\\.\\d+)?(px|em|rem|%))$/.test(value);\n        }\n        return false;\n      },\n      message: 'Font size must be a positive number or valid CSS unit'\n    });\n  }\n  // Add a validation rule for a specific property\n  addRule(property, rule) {\n    if (!this._rules.has(property)) {\n      this._rules.set(property, []);\n    }\n    this._rules.get(property).push(rule);\n  }\n  // Add a global validation rule\n  addGlobalRule(rule) {\n    this._globalRules.push(rule);\n  }\n  // Remove a validation rule\n  removeRule(property, ruleIndex) {\n    const rules = this._rules.get(property);\n    if (rules && ruleIndex >= 0 && ruleIndex < rules.length) {\n      rules.splice(ruleIndex, 1);\n    }\n  }\n  // Remove a global validation rule\n  removeGlobalRule(ruleIndex) {\n    if (ruleIndex >= 0 && ruleIndex < this._globalRules.length) {\n      this._globalRules.splice(ruleIndex, 1);\n    }\n  }\n  // Validate a style object\n  validate(style) {\n    const errors = [];\n    const warnings = [];\n    // Validate each property\n    Object.entries(style).forEach(([property, value]) => {\n      // Check property-specific rules\n      const propertyRules = this._rules.get(property) || [];\n      propertyRules.forEach(rule => {\n        if (!rule.validator(value)) {\n          errors.push(`${property}: ${rule.message}`);\n        }\n      });\n      // Check global rules\n      this._globalRules.forEach(rule => {\n        if (rule.property === property && !rule.validator(value)) {\n          errors.push(`${property}: ${rule.message}`);\n        }\n      });\n      // Add warnings for potentially problematic values\n      this._addWarnings(property, value, warnings);\n    });\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n  // Add warnings for potentially problematic values\n  _addWarnings(property, value, warnings) {\n    // Warning for very large values\n    if (typeof value === 'number' && value > 10000) {\n      warnings.push(`${property}: Very large value (${value}) may cause performance issues`);\n    }\n    // Warning for negative margins (can be intentional but worth noting)\n    if (property === 'margin' && typeof value === 'number' && value < 0) {\n      warnings.push(`${property}: Negative margin (${value}) may cause layout issues`);\n    }\n    // Warning for missing units on numeric values\n    if (typeof value === 'number' && ['width', 'height', 'fontSize'].includes(property)) {\n      warnings.push(`${property}: Numeric value (${value}) without unit will be treated as pixels`);\n    }\n  }\n  // Validate a single property\n  validateProperty(property, value) {\n    const errors = [];\n    const warnings = [];\n    // Check property-specific rules\n    const propertyRules = this._rules.get(property) || [];\n    propertyRules.forEach(rule => {\n      if (!rule.validator(value)) {\n        errors.push(`${property}: ${rule.message}`);\n      }\n    });\n    // Check global rules\n    this._globalRules.forEach(rule => {\n      if (rule.property === property && !rule.validator(value)) {\n        errors.push(`${property}: ${rule.message}`);\n      }\n    });\n    // Add warnings\n    this._addWarnings(property, value, warnings);\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n  // Get all validation rules for a property\n  getRules(property) {\n    return this._rules.get(property) || [];\n  }\n  // Get all global validation rules\n  getGlobalRules() {\n    return [...this._globalRules];\n  }\n  // Clear all rules\n  clearRules() {\n    this._rules.clear();\n    this._globalRules = [];\n  }\n  // Clear rules for a specific property\n  clearPropertyRules(property) {\n    this._rules.delete(property);\n  }\n}\nexports.QElementValidator = QElementValidator;","map":{"version":3,"names":["Object","defineProperty","exports","value","QElementValidator","constructor","_rules","Map","_globalRules","_initializeDefaultRules","addGlobalRule","property","validator","test","message","Number","isInteger","addRule","rule","has","set","get","push","removeRule","ruleIndex","rules","length","splice","removeGlobalRule","validate","style","errors","warnings","entries","forEach","propertyRules","_addWarnings","isValid","includes","validateProperty","getRules","getGlobalRules","clearRules","clear","clearPropertyRules","delete"],"sources":["/Users/jayson/Downloads/QElement/dist/QElementValidator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QElementValidator = void 0;\nclass QElementValidator {\n    constructor() {\n        this._rules = new Map();\n        this._globalRules = [];\n        this._initializeDefaultRules();\n    }\n    _initializeDefaultRules() {\n        // Add default validation rules\n        this.addGlobalRule({\n            property: 'width',\n            validator: (value) => {\n                if (typeof value === 'number')\n                    return value >= 0;\n                if (typeof value === 'string') {\n                    return /^(\\d+(\\.\\d+)?(px|em|rem|%|vh|vw|auto))$/.test(value) || value === 'auto';\n                }\n                return false;\n            },\n            message: 'Width must be a positive number or valid CSS unit'\n        });\n        this.addGlobalRule({\n            property: 'height',\n            validator: (value) => {\n                if (typeof value === 'number')\n                    return value >= 0;\n                if (typeof value === 'string') {\n                    return /^(\\d+(\\.\\d+)?(px|em|rem|%|vh|vw|auto))$/.test(value) || value === 'auto';\n                }\n                return false;\n            },\n            message: 'Height must be a positive number or valid CSS unit'\n        });\n        this.addGlobalRule({\n            property: 'opacity',\n            validator: (value) => {\n                return typeof value === 'number' && value >= 0 && value <= 1;\n            },\n            message: 'Opacity must be a number between 0 and 1'\n        });\n        this.addGlobalRule({\n            property: 'zIndex',\n            validator: (value) => {\n                return typeof value === 'number' && Number.isInteger(value);\n            },\n            message: 'Z-index must be an integer'\n        });\n        this.addGlobalRule({\n            property: 'fontSize',\n            validator: (value) => {\n                if (typeof value === 'number')\n                    return value > 0;\n                if (typeof value === 'string') {\n                    return /^(\\d+(\\.\\d+)?(px|em|rem|%))$/.test(value);\n                }\n                return false;\n            },\n            message: 'Font size must be a positive number or valid CSS unit'\n        });\n    }\n    // Add a validation rule for a specific property\n    addRule(property, rule) {\n        if (!this._rules.has(property)) {\n            this._rules.set(property, []);\n        }\n        this._rules.get(property).push(rule);\n    }\n    // Add a global validation rule\n    addGlobalRule(rule) {\n        this._globalRules.push(rule);\n    }\n    // Remove a validation rule\n    removeRule(property, ruleIndex) {\n        const rules = this._rules.get(property);\n        if (rules && ruleIndex >= 0 && ruleIndex < rules.length) {\n            rules.splice(ruleIndex, 1);\n        }\n    }\n    // Remove a global validation rule\n    removeGlobalRule(ruleIndex) {\n        if (ruleIndex >= 0 && ruleIndex < this._globalRules.length) {\n            this._globalRules.splice(ruleIndex, 1);\n        }\n    }\n    // Validate a style object\n    validate(style) {\n        const errors = [];\n        const warnings = [];\n        // Validate each property\n        Object.entries(style).forEach(([property, value]) => {\n            // Check property-specific rules\n            const propertyRules = this._rules.get(property) || [];\n            propertyRules.forEach(rule => {\n                if (!rule.validator(value)) {\n                    errors.push(`${property}: ${rule.message}`);\n                }\n            });\n            // Check global rules\n            this._globalRules.forEach(rule => {\n                if (rule.property === property && !rule.validator(value)) {\n                    errors.push(`${property}: ${rule.message}`);\n                }\n            });\n            // Add warnings for potentially problematic values\n            this._addWarnings(property, value, warnings);\n        });\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n    // Add warnings for potentially problematic values\n    _addWarnings(property, value, warnings) {\n        // Warning for very large values\n        if (typeof value === 'number' && value > 10000) {\n            warnings.push(`${property}: Very large value (${value}) may cause performance issues`);\n        }\n        // Warning for negative margins (can be intentional but worth noting)\n        if (property === 'margin' && typeof value === 'number' && value < 0) {\n            warnings.push(`${property}: Negative margin (${value}) may cause layout issues`);\n        }\n        // Warning for missing units on numeric values\n        if (typeof value === 'number' && ['width', 'height', 'fontSize'].includes(property)) {\n            warnings.push(`${property}: Numeric value (${value}) without unit will be treated as pixels`);\n        }\n    }\n    // Validate a single property\n    validateProperty(property, value) {\n        const errors = [];\n        const warnings = [];\n        // Check property-specific rules\n        const propertyRules = this._rules.get(property) || [];\n        propertyRules.forEach(rule => {\n            if (!rule.validator(value)) {\n                errors.push(`${property}: ${rule.message}`);\n            }\n        });\n        // Check global rules\n        this._globalRules.forEach(rule => {\n            if (rule.property === property && !rule.validator(value)) {\n                errors.push(`${property}: ${rule.message}`);\n            }\n        });\n        // Add warnings\n        this._addWarnings(property, value, warnings);\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n    // Get all validation rules for a property\n    getRules(property) {\n        return this._rules.get(property) || [];\n    }\n    // Get all global validation rules\n    getGlobalRules() {\n        return [...this._globalRules];\n    }\n    // Clear all rules\n    clearRules() {\n        this._rules.clear();\n        this._globalRules = [];\n    }\n    // Clear rules for a specific property\n    clearPropertyRules(property) {\n        this._rules.delete(property);\n    }\n}\nexports.QElementValidator = QElementValidator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}