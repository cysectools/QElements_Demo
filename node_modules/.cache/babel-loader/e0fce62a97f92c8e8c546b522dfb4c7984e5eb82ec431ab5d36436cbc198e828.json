{"ast":null,"code":"export class QElementValidator {\n  constructor() {\n    this._rules = new Map();\n    this._globalRules = [];\n    this._initializeDefaultRules();\n  }\n  _initializeDefaultRules() {\n    // Add default validation rules\n    this.addGlobalRule({\n      property: 'width',\n      validator: value => {\n        if (typeof value === 'number') return value >= 0;\n        if (typeof value === 'string') {\n          return /^(\\d+(\\.\\d+)?(px|em|rem|%|vh|vw|auto))$/.test(value) || value === 'auto';\n        }\n        return false;\n      },\n      message: 'Width must be a positive number or valid CSS unit'\n    });\n    this.addGlobalRule({\n      property: 'height',\n      validator: value => {\n        if (typeof value === 'number') return value >= 0;\n        if (typeof value === 'string') {\n          return /^(\\d+(\\.\\d+)?(px|em|rem|%|vh|vw|auto))$/.test(value) || value === 'auto';\n        }\n        return false;\n      },\n      message: 'Height must be a positive number or valid CSS unit'\n    });\n    this.addGlobalRule({\n      property: 'opacity',\n      validator: value => {\n        return typeof value === 'number' && value >= 0 && value <= 1;\n      },\n      message: 'Opacity must be a number between 0 and 1'\n    });\n    this.addGlobalRule({\n      property: 'zIndex',\n      validator: value => {\n        return typeof value === 'number' && Number.isInteger(value);\n      },\n      message: 'Z-index must be an integer'\n    });\n    this.addGlobalRule({\n      property: 'fontSize',\n      validator: value => {\n        if (typeof value === 'number') return value > 0;\n        if (typeof value === 'string') {\n          return /^(\\d+(\\.\\d+)?(px|em|rem|%))$/.test(value);\n        }\n        return false;\n      },\n      message: 'Font size must be a positive number or valid CSS unit'\n    });\n  }\n  // Add a validation rule for a specific property\n  addRule(property, rule) {\n    if (!this._rules.has(property)) {\n      this._rules.set(property, []);\n    }\n    this._rules.get(property).push(rule);\n  }\n  // Add a global validation rule\n  addGlobalRule(rule) {\n    this._globalRules.push(rule);\n  }\n  // Remove a validation rule\n  removeRule(property, ruleIndex) {\n    const rules = this._rules.get(property);\n    if (rules && ruleIndex >= 0 && ruleIndex < rules.length) {\n      rules.splice(ruleIndex, 1);\n    }\n  }\n  // Remove a global validation rule\n  removeGlobalRule(ruleIndex) {\n    if (ruleIndex >= 0 && ruleIndex < this._globalRules.length) {\n      this._globalRules.splice(ruleIndex, 1);\n    }\n  }\n  // Validate a style object\n  validate(style) {\n    const errors = [];\n    const warnings = [];\n    // Validate each property\n    Object.entries(style).forEach(_ref => {\n      let [property, value] = _ref;\n      // Check property-specific rules\n      const propertyRules = this._rules.get(property) || [];\n      propertyRules.forEach(rule => {\n        if (!rule.validator(value)) {\n          errors.push(\"\".concat(property, \": \").concat(rule.message));\n        }\n      });\n      // Check global rules\n      this._globalRules.forEach(rule => {\n        if (rule.property === property && !rule.validator(value)) {\n          errors.push(\"\".concat(property, \": \").concat(rule.message));\n        }\n      });\n      // Add warnings for potentially problematic values\n      this._addWarnings(property, value, warnings);\n    });\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n  // Add warnings for potentially problematic values\n  _addWarnings(property, value, warnings) {\n    // Warning for very large values\n    if (typeof value === 'number' && value > 10000) {\n      warnings.push(\"\".concat(property, \": Very large value (\").concat(value, \") may cause performance issues\"));\n    }\n    // Warning for negative margins (can be intentional but worth noting)\n    if (property === 'margin' && typeof value === 'number' && value < 0) {\n      warnings.push(\"\".concat(property, \": Negative margin (\").concat(value, \") may cause layout issues\"));\n    }\n    // Warning for missing units on numeric values\n    if (typeof value === 'number' && ['width', 'height', 'fontSize'].includes(property)) {\n      warnings.push(\"\".concat(property, \": Numeric value (\").concat(value, \") without unit will be treated as pixels\"));\n    }\n  }\n  // Validate a single property\n  validateProperty(property, value) {\n    const errors = [];\n    const warnings = [];\n    // Check property-specific rules\n    const propertyRules = this._rules.get(property) || [];\n    propertyRules.forEach(rule => {\n      if (!rule.validator(value)) {\n        errors.push(\"\".concat(property, \": \").concat(rule.message));\n      }\n    });\n    // Check global rules\n    this._globalRules.forEach(rule => {\n      if (rule.property === property && !rule.validator(value)) {\n        errors.push(\"\".concat(property, \": \").concat(rule.message));\n      }\n    });\n    // Add warnings\n    this._addWarnings(property, value, warnings);\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n  // Get all validation rules for a property\n  getRules(property) {\n    return this._rules.get(property) || [];\n  }\n  // Get all global validation rules\n  getGlobalRules() {\n    return [...this._globalRules];\n  }\n  // Clear all rules\n  clearRules() {\n    this._rules.clear();\n    this._globalRules = [];\n  }\n  // Clear rules for a specific property\n  clearPropertyRules(property) {\n    this._rules.delete(property);\n  }\n}","map":{"version":3,"names":["QElementValidator","constructor","_rules","Map","_globalRules","_initializeDefaultRules","addGlobalRule","property","validator","value","test","message","Number","isInteger","addRule","rule","has","set","get","push","removeRule","ruleIndex","rules","length","splice","removeGlobalRule","validate","style","errors","warnings","Object","entries","forEach","_ref","propertyRules","concat","_addWarnings","isValid","includes","validateProperty","getRules","getGlobalRules","clearRules","clear","clearPropertyRules","delete"],"sources":["/Users/jayson/Downloads/QElement/dist/QElementValidator.js"],"sourcesContent":["export class QElementValidator {\n    constructor() {\n        this._rules = new Map();\n        this._globalRules = [];\n        this._initializeDefaultRules();\n    }\n    _initializeDefaultRules() {\n        // Add default validation rules\n        this.addGlobalRule({\n            property: 'width',\n            validator: (value) => {\n                if (typeof value === 'number')\n                    return value >= 0;\n                if (typeof value === 'string') {\n                    return /^(\\d+(\\.\\d+)?(px|em|rem|%|vh|vw|auto))$/.test(value) || value === 'auto';\n                }\n                return false;\n            },\n            message: 'Width must be a positive number or valid CSS unit'\n        });\n        this.addGlobalRule({\n            property: 'height',\n            validator: (value) => {\n                if (typeof value === 'number')\n                    return value >= 0;\n                if (typeof value === 'string') {\n                    return /^(\\d+(\\.\\d+)?(px|em|rem|%|vh|vw|auto))$/.test(value) || value === 'auto';\n                }\n                return false;\n            },\n            message: 'Height must be a positive number or valid CSS unit'\n        });\n        this.addGlobalRule({\n            property: 'opacity',\n            validator: (value) => {\n                return typeof value === 'number' && value >= 0 && value <= 1;\n            },\n            message: 'Opacity must be a number between 0 and 1'\n        });\n        this.addGlobalRule({\n            property: 'zIndex',\n            validator: (value) => {\n                return typeof value === 'number' && Number.isInteger(value);\n            },\n            message: 'Z-index must be an integer'\n        });\n        this.addGlobalRule({\n            property: 'fontSize',\n            validator: (value) => {\n                if (typeof value === 'number')\n                    return value > 0;\n                if (typeof value === 'string') {\n                    return /^(\\d+(\\.\\d+)?(px|em|rem|%))$/.test(value);\n                }\n                return false;\n            },\n            message: 'Font size must be a positive number or valid CSS unit'\n        });\n    }\n    // Add a validation rule for a specific property\n    addRule(property, rule) {\n        if (!this._rules.has(property)) {\n            this._rules.set(property, []);\n        }\n        this._rules.get(property).push(rule);\n    }\n    // Add a global validation rule\n    addGlobalRule(rule) {\n        this._globalRules.push(rule);\n    }\n    // Remove a validation rule\n    removeRule(property, ruleIndex) {\n        const rules = this._rules.get(property);\n        if (rules && ruleIndex >= 0 && ruleIndex < rules.length) {\n            rules.splice(ruleIndex, 1);\n        }\n    }\n    // Remove a global validation rule\n    removeGlobalRule(ruleIndex) {\n        if (ruleIndex >= 0 && ruleIndex < this._globalRules.length) {\n            this._globalRules.splice(ruleIndex, 1);\n        }\n    }\n    // Validate a style object\n    validate(style) {\n        const errors = [];\n        const warnings = [];\n        // Validate each property\n        Object.entries(style).forEach(([property, value]) => {\n            // Check property-specific rules\n            const propertyRules = this._rules.get(property) || [];\n            propertyRules.forEach(rule => {\n                if (!rule.validator(value)) {\n                    errors.push(`${property}: ${rule.message}`);\n                }\n            });\n            // Check global rules\n            this._globalRules.forEach(rule => {\n                if (rule.property === property && !rule.validator(value)) {\n                    errors.push(`${property}: ${rule.message}`);\n                }\n            });\n            // Add warnings for potentially problematic values\n            this._addWarnings(property, value, warnings);\n        });\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n    // Add warnings for potentially problematic values\n    _addWarnings(property, value, warnings) {\n        // Warning for very large values\n        if (typeof value === 'number' && value > 10000) {\n            warnings.push(`${property}: Very large value (${value}) may cause performance issues`);\n        }\n        // Warning for negative margins (can be intentional but worth noting)\n        if (property === 'margin' && typeof value === 'number' && value < 0) {\n            warnings.push(`${property}: Negative margin (${value}) may cause layout issues`);\n        }\n        // Warning for missing units on numeric values\n        if (typeof value === 'number' && ['width', 'height', 'fontSize'].includes(property)) {\n            warnings.push(`${property}: Numeric value (${value}) without unit will be treated as pixels`);\n        }\n    }\n    // Validate a single property\n    validateProperty(property, value) {\n        const errors = [];\n        const warnings = [];\n        // Check property-specific rules\n        const propertyRules = this._rules.get(property) || [];\n        propertyRules.forEach(rule => {\n            if (!rule.validator(value)) {\n                errors.push(`${property}: ${rule.message}`);\n            }\n        });\n        // Check global rules\n        this._globalRules.forEach(rule => {\n            if (rule.property === property && !rule.validator(value)) {\n                errors.push(`${property}: ${rule.message}`);\n            }\n        });\n        // Add warnings\n        this._addWarnings(property, value, warnings);\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n    // Get all validation rules for a property\n    getRules(property) {\n        return this._rules.get(property) || [];\n    }\n    // Get all global validation rules\n    getGlobalRules() {\n        return [...this._globalRules];\n    }\n    // Clear all rules\n    clearRules() {\n        this._rules.clear();\n        this._globalRules = [];\n    }\n    // Clear rules for a specific property\n    clearPropertyRules(property) {\n        this._rules.delete(property);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}